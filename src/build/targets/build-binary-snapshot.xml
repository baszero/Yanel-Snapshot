<?xml version="1.0"?>

<project name="build-binary-snapshot" default="bin-snapshot" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
  
<!--
  <target name="bin-snapshot" description="Create a binary snapshot" depends="init">
-->
  <target name="bin-snapshot" description="Create a binary snapshot" depends="init, webapp">
    <fail message="No revision specified! Please configure property 'yanel.revision' within 'src/build/local.build.properties'.">
      <condition>
        <equals arg1="${yanel.revision}" arg2="REVISION"/>
      </condition>
    </fail>

    <property name="snapshot.dir.unix" value="${build.dir}/bin-snapshots/wyona-yanel-${yanel.version}-r${yanel.revision}-bin"/>
    <fail message="Directory already exists: '${snapshot.dir.unix}'. Either delete this directory or use a different version/revision!">
      <condition>
        <available file="${snapshot.dir.unix}" type="dir"/>
      </condition>
    </fail>
    <mkdir dir="${snapshot.dir.unix}"/>

    <property name="snapshot.dir.win" value="${build.dir}/bin-snapshots/wyona-yanel-${yanel.version}-r${yanel.revision}-bin-win"/>
    <fail message="Directory already exists: '${snapshot.dir.win}'. Either delete this directory or use a different version/revision!">
      <condition>
        <available file="${snapshot.dir.win}" type="dir"/>
      </condition>
    </fail>
    <mkdir dir="${snapshot.dir.win}"/>

    <antcall target="prepare-tomcat"/>

    <tstamp>
      <format property="TIMESTAMP" pattern="yyyyMMddhhmmss"/>
    </tstamp>
    <property name="tmp.dir" value="${build.dir}/bin-snapshots/tmp-${TIMESTAMP}"/>
    <mkdir dir="${tmp.dir}"/>

    <antcall target="copy-realms-resources"/>

    <!-- Windows specific snapshot -->
    <antcall target="bin-snapshot-win"/>

    <!-- UNIX specific snapshot -->
    <antcall target="bin-snapshot-unix"/>
    <delete dir="${snapshot.dir.unix}"/>

    <delete dir="${tmp.dir}"/>
  </target>

  <target name="prepare-tomcat">
    <artifact:remoteRepository id="wyona.org.remote.repository" url="${maven.url}"/>

    <artifact:dependencies pathId="maven2.tomcat.classpath" filesetId="maven2.tomcat.fileset">
      <remoteRepository refid="wyona.org.remote.repository"/>
      <dependency groupId="apache-org" artifactId="apache-tomcat" version="${tomcat.version}" scope="provided"/>
    </artifact:dependencies>
    
    <!-- Unpack Tomcat -->
    <unzip dest="${snapshot.dir.unix}">
      <fileset refid="maven2.tomcat.fileset"/>
    </unzip>
    <delete dir="${snapshot.dir.unix}/META-INF"/>
    <chmod dir="${snapshot.dir.unix}/apache-tomcat-${tomcat.version}/bin" perm="755" includes="*"/>

    <!-- TODO: Differentiate between Java 1.4 and higher (jmx.jar)! -->
<!--
    <copy file="${yanel.source.home}/tools/apache-tomcat/java-1.4/apache-tomcat-5.5.20/bin/jmx.jar" todir="${snapshot.dir.unix}/apache-tomcat-${tomcat.version}/bin"/>
-->

    <!-- Endorsed libs -->
<!--
    <copy file="${yanel.source.home}/build/webapps/${servlet.context.prefix}/WEB-INF/lib/${xerces.impl.artifactId}-${xerces.impl.version}.jar" todir="${snapshot.dir.unix}/apache-tomcat-${tomcat.version}/common/endorsed"/>
    <copy file="${yanel.source.home}/build/webapps/${servlet.context.prefix}/WEB-INF/lib/${xml.apis.artifactId}-${xml.apis.version}.jar" todir="${snapshot.dir.unix}/apache-tomcat-${tomcat.version}/common/endorsed"/>
-->

    <!-- delete unused tomcat files -->
    <delete dir="${snapshot.dir.unix}/apache-tomcat-${tomcat.version}/webapps/ROOT"/>
    <delete dir="${snapshot.dir.unix}/apache-tomcat-${tomcat.version}/webapps/jsp-examples"/>
    <delete dir="${snapshot.dir.unix}/apache-tomcat-${tomcat.version}/webapps/servlets-examples"/>
    <delete dir="${snapshot.dir.unix}/apache-tomcat-${tomcat.version}/webapps/tomcat-docs"/>
    <delete dir="${snapshot.dir.unix}/apache-tomcat-${tomcat.version}/webapps/balancer"/>
    <delete dir="${snapshot.dir.unix}/apache-tomcat-${tomcat.version}/webapps/webdav"/>
    
    <!-- Add context file -->
    <copy file="${yanel.source.home}/src/binary-dist/tomcat-context.xml" tofile="${snapshot.dir.unix}/apache-tomcat-${tomcat.version}/conf/Catalina/localhost/Wyona-Yanel-webapp-${yanel.version}-r${yanel.revision}.xml"/>
    <replace file="${snapshot.dir.unix}/apache-tomcat-${tomcat.version}/conf/Catalina/localhost/Wyona-Yanel-webapp-${yanel.version}-r${yanel.revision}.xml" value="yanel-webapp-${yanel.version}-r${yanel.revision}">
      <replacetoken>@SERVLET_CONTEXT@</replacetoken>
    </replace>
    <copy file="${yanel.source.home}/src/binary-dist/tomcat-context.xml" tofile="${snapshot.dir.unix}/apache-tomcat-${tomcat.version}/conf/Catalina/localhost/ROOT.xml"/>
    <replace file="${snapshot.dir.unix}/apache-tomcat-${tomcat.version}/conf/Catalina/localhost/ROOT.xml" value="yanel-webapp-${yanel.version}-r${yanel.revision}">
      <replacetoken>@SERVLET_CONTEXT@</replacetoken>
    </replace>
  </target>
  
  <!-- Copy realms and resources -->
  <target name="copy-realms-resources">
    <copy todir="${tmp.dir}">
      <fileset dir="${yanel.source.home}/build/webapps/${servlet.context.prefix}"/>
    </copy>
    <copy todir="${tmp.dir}/realms">
      <fileset dir="${yanel.source.home}/src/realms"/>
    </copy>
    <replace file="${tmp.dir}/realms/javadoc/repository.xml" value="content">
      <replacetoken>../../../build/javadoc</replacetoken>
    </replace>
    <replace file="${tmp.dir}/realms/test/yanel/config/data-repository.xml" value="../data">
      <replacetoken>../../../../../local/test/data</replacetoken>
    </replace>
    <copy todir="${tmp.dir}/realms/javadoc/content">
      <fileset dir="${yanel.source.home}/build/javadoc"/>
    </copy>

    <copy file="${yanel.source.home}/conf/realms.xml" todir="${tmp.dir}/WEB-INF/classes" overwrite="true"/>
    <replace file="${tmp.dir}/WEB-INF/classes/realms.xml" value="../../realms">
      <replacetoken>@REALMS_DIR@</replacetoken>
    </replace>

    <copy file="${yanel.source.home}/conf/resource-types.xml" tofile="${tmp.dir}/WEB-INF/classes/resource-types.xml" overwrite="true"/>

    <replace file="${tmp.dir}/WEB-INF/classes/resource-types.xml" value="../../resources">
      <replacetoken>@YANEL_SRC_DIR@/src/resources</replacetoken>
    </replace>
    <replace file="${tmp.dir}/WEB-INF/classes/resource-types.xml" value="../../resources">
      <replacetoken>@YANEL_SRC_DIR@/src/contributions/resources</replacetoken>
    </replace>
    <replace file="${tmp.dir}/WEB-INF/classes/resource-types.xml" value="../../resources">
      <replacetoken>@YANEL_SRC_DIR@/src/realms/welcome-admin/yanel/resources</replacetoken>
    </replace>

    <copy todir="${tmp.dir}/resources">
      <fileset dir="${yanel.source.home}/src/resources"/>
    </copy>
    <copy todir="${tmp.dir}/resources">
      <fileset dir="${yanel.source.home}/src/contributions/resources"/>
    </copy>
    <copy todir="${tmp.dir}/resources">
      <fileset dir="${yanel.source.home}/src/realms/welcome-admin/yanel/resources"/>
    </copy>
    <xslt in="${yanel.source.home}/conf/yanel.xml" out="${tmp.dir}/WEB-INF/classes/yanel.properties" style="yanel2properties.xsl" force="true">
      <!--<param name="servlet.context.prefix" expression="${servlet.context.prefix}"/>-->
    </xslt>
    <replace file="${tmp.dir}/WEB-INF/classes/yanel.properties" value="../../resources">
      <replacetoken>../src/resources</replacetoken>
    </replace>
    <replace file="${tmp.dir}/WEB-INF/classes/yanel.properties" value="../../resources">
      <replacetoken>../src/contributions/resources</replacetoken>
    </replace>
    <replace file="${tmp.dir}/WEB-INF/classes/yanel.properties" value="../../resources">
      <replacetoken>../src/realms/welcome-admin/yanel/resources</replacetoken>
    </replace>

    <copy file="${yanel.source.home}/src/binary-dist/log4j.properties" todir="${tmp.dir}/WEB-INF/classes" overwrite="true"/>
    <replace file="${tmp.dir}/WEB-INF/classes/log4j.properties" value="yanel-webapp-${yanel.version}-r${yanel.revision}">
      <replacetoken>@SERVLET_CONTEXT@</replacetoken>
    </replace>
    <mkdir dir="${tmp.dir}/WEB-INF/logs"/>

    <copy file="${yanel.source.home}/src/build/install.rdf" todir="${tmp.dir}/WEB-INF/classes" overwrite="true"/>
    <replace file="${tmp.dir}/WEB-INF/classes/install.rdf" value="${yanel.version}">
      <replacetoken>@VERSION@</replacetoken>
    </replace>
    <replace file="${tmp.dir}/WEB-INF/classes/install.rdf" value="${yanel.revision}">
      <replacetoken>@REVISION@</replacetoken>
    </replace>
    <replace file="${tmp.dir}/WEB-INF/classes/install.rdf" value="bin-snapshot">
      <replacetoken>@INSTALLTYPE@</replacetoken>
    </replace>
  </target>
  
  <target name="bin-snapshot-win">
    <!-- Unpatch install.rdf ... -->

    <copy todir="${snapshot.dir.win}/apache-tomcat-${tomcat.version}">
      <fileset dir="${snapshot.dir.unix}/apache-tomcat-${tomcat.version}" />
    </copy>
    <copy todir="${snapshot.dir.win}/yanel-webapp-${yanel.version}-r${yanel.revision}">
      <fileset dir="${tmp.dir}"/>
    </copy>
    <!-- <move file="${snapshot.dir.unix}/${servlet.context.prefix}.war" todir="${snapshot.dir.win}/apache-tomcat-${tomcat.version}/webapps"/> -->

    <!-- Copy licensing-related files -->
    <copy file="${yanel.source.home}/LICENSE.txt" todir="${snapshot.dir.win}"/>
    <copy file="${yanel.source.home}/NOTICE.txt" todir="${snapshot.dir.win}"/>

    <!-- Copy Windows specific files -->
    <copy file="${yanel.source.home}/src/binary-dist/README-WINDOWS.txt" tofile="${snapshot.dir.win}/README.txt"/>
    <copy file="${yanel.source.home}/src/binary-dist/start.bat" todir="${snapshot.dir.win}"/>
    <copy file="${yanel.source.home}/src/binary-dist/stop.bat" todir="${snapshot.dir.win}"/>
    <copy file="${yanel.source.home}/src/binary-dist/windows/start.ico" todir="${snapshot.dir.win}"/>
    <copy file="${yanel.source.home}/src/binary-dist/windows/stop.ico" todir="${snapshot.dir.win}"/>
    <copy file="${yanel.source.home}/src/binary-dist/windows/install.ico" todir="${snapshot.dir.win}"/>
    <copy file="${yanel.source.home}/src/binary-dist/windows/uninstall.ico" todir="${snapshot.dir.win}"/>
    <copy file="${yanel.source.home}/src/binary-dist/windows/install-yanel.nsi" todir="${snapshot.dir.win}"/>
    <replace file="${snapshot.dir.win}/install-yanel.nsi" value="${yanel.version}-r${yanel.revision}">
      <replacetoken>@YANEL_VERSION@</replacetoken>
    </replace>

    <!-- Create ZIP file 
    <zip destfile="${snapshot.dir.unix}.zip">
      <zipfileset dir="${snapshot.dir.unix}" prefix="wyona-yanel-${yanel.version}-r${yanel.revision}-bin" filemode="755"/>
    </zip>
    -->
  </target>
  
  <target name="bin-snapshot-unix">
    <copy todir="${snapshot.dir.unix}/yanel-webapp-${yanel.version}-r${yanel.revision}">
      <fileset dir="${tmp.dir}"/>
    </copy>

    <!-- Copy licensing-related files -->
    <copy file="${yanel.source.home}/LICENSE.txt" todir="${snapshot.dir.unix}"/>
    <copy file="${yanel.source.home}/NOTICE.txt" todir="${snapshot.dir.unix}"/>

    <!-- Copy UNIX specific files -->
    <copy file="${yanel.source.home}/src/binary-dist/README-UNIX.txt" tofile="${snapshot.dir.unix}/README.txt" overwrite="true"/>
    <copy file="${yanel.source.home}/src/binary-dist/start.sh" todir="${snapshot.dir.unix}"/>
    <copy file="${yanel.source.home}/src/binary-dist/stop.sh" todir="${snapshot.dir.unix}"/>

    <!-- Create TGZ file -->
    <tar destfile="${snapshot.dir.unix}.tar.gz" compression="gzip" longfile="gnu"><!-- we need GNU tar, our filenames are too long and cannot reasonably be reduced to less than 100 characters -->
      <tarfileset dir="${snapshot.dir.unix}" prefix="wyona-yanel-${yanel.version}-r${yanel.revision}-bin" mode="775"/>
    </tar>
    <!--gzip src="${snapshot.dir.unix}.tar" destfile="${snapshot.dir.unix}.tar.gz"/>
    <delete file="${snapshot.dir.unix}.tar"/-->
  </target>
  
</project>
