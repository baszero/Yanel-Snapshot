<?xml version="1.0"?>

<project name="resources" default="deploy-resources" xmlns:artifact="antlib:org.apache.maven.artifact.ant">

  <target name="generate-resources-build" description="Generate resources build" depends="init">
<!--
  <target name="generate-resources-build" description="Generate resources build" depends="init, set-classpath">
-->
<!-- The core needs to exist, because certain classes will be re-used within custom tasks -->
<!--
<target name="generate-resources-build" description="Generate resources build" depends="init, compile-core, set-classpath">
<echo>INFO: Generate build file to build resources</echo>
-->

<!--
    <property name="property.classpath.compile" refid="classpath.compile"/>
    <echo>COMPILE CORE CLASSPATH: ${property.classpath.compile}</echo>
-->

<!-- Build custom ant tasks -->
<!--
    <javac srcdir="${yanel.source.home}/src/build/java"
           destdir="${classes.dir}">
      <classpath refid="classpath.compile"/>
    </javac>
-->

    <path id="classpath.taskdef.merge-resource-types-configs">
      <pathelement path="${yanel.source.home}/src/build/"/> <!-- Location of log4j.properties (NOTE: The conf directory also contains a log4j.properties and hence this lines needs to be set first!) -->
      <pathelement path="${yanel.source.home}/conf/"/>
      <pathelement path="${yanel.source.home}/conf/local-foaf/"/>
      <pathelement path="${classes.dir}"/> <!-- Location of the custom ant tasks -->
      <fileset dir="${yanel.source.home}/build/lib"> <!-- Location of yanel core lib -->
        <include name="*.jar"/>
      </fileset>
      <pathelement path="${maven2.cp}"/>
      <pathelement path="${maven2.compile.cp}"/>
    </path>

<!-- DEBUG
    <property name="property.classpath.taskdef.merge-resource-types-configs" refid="classpath.taskdef.merge-resource-types-configs"/>
    <echo>CLASSPATH: ${property.classpath.taskdef.merge-resource-types-configs}</echo>
-->

<!--
<taskdef name="merge-resource-types-configs" classpathref="classpath.taskdef.merge-resource-types-configs" classname="org.wyona.yanel.ant.MergeResourceTypesConfigsTask"/>
-->

<!--
    <taskdef name="merge-resource-types-configs" classname="org.wyona.yanel.ant.MergeResourceTypesConfigsTask">
      <classpath refid="classpath.taskdef.merge-resource-types-configs"/>
    </taskdef>
-->

<!-- TODO: An exception is thrown by the spring framework ...
    <merge-resource-types-configs defaultrealmsconfigdir="${yanel.source.home}/conf/" localrealmsconfigdir="${yanel.source.home}/${local.config.dir}/"/>
-->

    <condition property="local.resource-types.config.exists">
      <available file="${yanel.source.home}/${local.config.dir}/local.resource-types.xml" type="file"/>
    </condition>
    <antcall target="generate-resources-build-from-default"/>
    <antcall target="generate-resources-build-from-local"/>

    <replace file="../../build/build-resource-types.xml" value="${yanel.source.home.forward.slashes}">
      <replacetoken>@YANEL_SRC_DIR@</replacetoken>
    </replace>
  </target>

  <target name="generate-resources-build-from-default" description="Generate resources build from default config" depends="init" unless="local.resource-types.config.exists">
    <xslt in="${yanel.source.home}/conf/resource-types.xml" out="../../build/build-resource-types.xml" style="yanel2resources.xsl" force="false">
      <param name="servlet.context.prefix" expression="${servlet.context.prefix}"/>
      <param name="yanel.source.version" expression="${yanel.version}-r${yanel.revision}"/>
      <param name="maven.url" expression="${maven.url}"/>
    </xslt>
  </target>

  <target name="generate-resources-build-from-local" description="Generate resources build from local config" depends="init" if="local.resource-types.config.exists">
    <xslt in="${yanel.source.home}/${local.config.dir}/local.resource-types.xml" out="../../build/build-resource-types.xml" style="yanel2resources.xsl" force="true">
      <param name="servlet.context.prefix" expression="${servlet.context.prefix}"/>
      <param name="yanel.source.version" expression="${yanel.version}-r${yanel.revision}"/>
      <param name="maven.url" expression="${maven.url}"/>
    </xslt>
  </target>

  <target name="build-resources" description="Build resources" depends="generate-resources-build">
    <condition property="local.resource-types.config.exists">
      <available file="${yanel.source.home}/${local.config.dir}/local.resource-types.xml" type="file"/>
    </condition>
    <antcall target="check-config-version-resource-types-xml"/>

    <ant antfile="${yanel.source.home}/build/build-resource-types.xml" target="build-resources"/>
  </target>

  <target name="deploy-resources" description="Deploy resources" depends="generate-resources-build">
  
    <!-- TODO: Seems to copy global i18n files, but has nothing to do with resources. -->
    <copy todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/">
      <fileset dir="." casesensitive="yes">
        <include name="global_*.properties"/>
      </fileset>
    </copy>
    
    <ant antfile="${yanel.source.home}/build/build-resource-types.xml" target="deploy-resources"/>
  </target>

</project>  
