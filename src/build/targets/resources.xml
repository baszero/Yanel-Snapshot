<?xml version="1.0"?>

<project name="resources" default="deploy-resources" xmlns:artifact="antlib:org.apache.maven.artifact.ant">

<!-- The core needs to exist, because certain classes will be re-used within custom tasks -->
  <target name="generate-resources-build" description="Generate resources build" depends="init, compile-core, set-classpath">
  <echo>INFO: Generate build file to build resources</echo>

<!--
    <property name="property.classpath.compile" refid="classpath.compile"/>
    <echo>DEBUG COMPILE CORE CLASSPATH: ${property.classpath.compile}</echo>
-->

<!-- Build custom ant tasks -->
    <javac srcdir="${yanel.source.home}/src/build/java"
           encoding="${javac.encoding}"
           destdir="${classes.dir}">
      <classpath refid="classpath.compile"/>
    </javac>

    <path id="classpath.taskdef.merge-resource-types-configs">
      <pathelement path="${yanel.source.home}/src/build/"/> <!-- Location of log4j.properties (NOTE: The conf directory also contains a log4j.properties and hence this lines needs to be set first!) -->
      <pathelement path="${yanel.source.home}/conf/"/>
      <pathelement path="${yanel.source.home}/conf/local-foaf/"/>
      <pathelement path="${classes.dir}"/> <!-- Location of the custom ant tasks -->
      <pathelement path="${maven2.cp}"/>
      <pathelement path="${maven2.compile.cp}"/>
    </path>

<!-- DEBUG
    <property name="property.classpath.taskdef.merge-resource-types-configs" refid="classpath.taskdef.merge-resource-types-configs"/>
    <echo>CLASSPATH: ${property.classpath.taskdef.merge-resource-types-configs}</echo>
-->

    <taskdef name="merge-resource-types-configs" classname="org.wyona.yanel.ant.MergeResourceTypesConfigsTask">
      <classpath refid="classpath.taskdef.merge-resource-types-configs"/>
    </taskdef>

    <antcall target="prepare-realms-config"/>
    <antcall target="prepare-global-resource-types-config"/>
    <merge-resource-types-configs realmsconfigfile="${classes.dir}/realms.xml" globalresourcetypesconfigfile="${classes.dir}/resource-types.xml" isbinaryrelease="${copy.resource-type-configs.to.webapp}"/>
    <antcall target="generate-resources-build-file"/>
  </target>

  <target name="prepare-global-resource-types-config">
    <if> <!-- See ant-contrib lib: http://ant-contrib.sourceforge.net/tasks/tasks/if.html -->
      <available file="${local.config.home}/local.resource-types.xml" type="file"/>
      <then>
        <echo>INFO: Local resource-types file exists: ${local.config.home}/local.resource-types.xml</echo>
        <copy file="${local.config.home}/local.resource-types.xml" tofile="${classes.dir}/resource-types.xml" overwrite="true"/>
      </then>
      <else>
        <echo>Local resource-types file does NOT exists</echo>
        <copy file="${yanel.source.home}/conf/resource-types.xml" tofile="${classes.dir}/resource-types.xml" overwrite="true"/>
      </else>
    </if>
    <replace file="${classes.dir}/resource-types.xml" value="${yanel.source.home.forward.slashes}">
      <replacetoken>@YANEL_SRC_DIR@</replacetoken>
    </replace>
  </target>

  <target name="prepare-realms-config">
    <if>
      <available file="${local.config.home}/local.realms.xml" type="file"/>
      <then>
        <echo>INFO: Local realms file exists: ${local.config.home}/local.realms.xml</echo>
        <copy file="${local.config.home}/local.realms.xml" tofile="${classes.dir}/realms.xml"/>
      </then>
      <else>
        <echo>Local realms file does NOT exists</echo>
        <copy file="${yanel.source.home}/conf/realms.xml" tofile="${classes.dir}/realms.xml"/>
      </else>
    </if>
    <replace file="${classes.dir}/realms.xml" value="${yanel.source.home.forward.slashes}/src/realms">
      <replacetoken>@REALMS_DIR@</replacetoken>
    </replace>
  </target>

  <target name="generate-resources-build-file" description="Generate resources build file" depends="init">
    <xslt in="${classes.dir}/resource-types.xml" out="../../build/build-resource-types.xml" style="yanel2resources.xsl" force="true">
      <param name="servlet.context.prefix" expression="${servlet.context.prefix}"/>
      <param name="yanel.source.version" expression="${yanel.version}-r${yanel.revision}"/>
      <param name="maven.url" expression="${maven.url}"/>
      <param name="yanel.source.home" expression="${yanel.source.home.forward.slashes}"/>
      <param name="copy.resource-type-configs.to.webapp" expression="${copy.resource-type-configs.to.webapp}"/>
    </xslt>
  </target>

  <target name="build-resources" description="Build resources" depends="generate-resources-build">
    <condition property="local.resource-types.config.exists">
      <available file="${local.config.home}/local.resource-types.xml" type="file"/>
    </condition>
    <antcall target="check-config-version-resource-types-xml"/>

    <ant antfile="${yanel.source.home}/build/build-resource-types.xml" target="build-resources"/>
  </target>

  <target name="deploy-resources" description="Deploy resources" depends="generate-resources-build">
  
    <!-- TODO: Seems to copy global i18n files, but has nothing to do with resources. -->
    <copy todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/">
      <fileset dir="." casesensitive="yes">
        <include name="global_*.properties"/>
      </fileset>
    </copy>
    
    <ant antfile="${yanel.source.home}/build/build-resource-types.xml" target="deploy-resources"/>
  </target>

</project>  
