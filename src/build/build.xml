<?xml version="1.0"?>

<project name="yanel-main" default="deploy-to-tomcat"
 xmlns:yanel="http://www.wyona.org/yanel/1.0"
 xmlns:wyona-tools="http://www.wyona.org/tools/1.0"
 xmlns:svnant="antlib:org.tigris.subversion.svnant"
>

  <description>Yanel Build</description>

<!--
  <taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask"/>
  <svn failonerror="false">
    <status path="../../" lastChangedRevisionProperty="yanel.revision.svn"/>
  </svn>
  <condition property="yanel.revision" value="${yanel.revision.svn}">
   <not>
     <equals arg1="-1" arg2="${yanel.revision.svn}"/>
   </not>
  </condition>
-->

  <!--
   XXX: We cannot simply use the svnant namespace probably just because
    the antlib definition XML file in the svnant 1.1.0-RC2 JAR is not named "antlib.xml":
  -->
  <!--FIXME: javahl does not seem to be found in CLASSPATH when using this (tested under Windows): -->
  <typedef uri="antlib:org.tigris.subversion.svnant" resource="org/tigris/subversion/svnant/svnantlib.xml" classpath="C:\Documents and Settings\Guillaume\Bureau\yanel.VC\tools\apache-ant_extras\svnjavahl.jar"/><!-- classpathref="svnant.classpath"-->
    
  <property file="local.build.properties"/>
  <property file="build.properties"/>
  <property name="yanel.source.home" value="${basedir}/../../"/>

  <property name="local.config.home" location="${yanel.source.home}/${local.config.dir}"/>
  <!--echo>local.config.home: ${local.config.home}</echo-->

<!--
  <echo>Yanel Revision: ${yanel.revision}</echo>
-->
    
  <condition property="isWindows">
   <os family="windows"/>
  </condition>
  
  <condition property="isUnix">
   <os family="unix"/>
  </condition>

  <import file="dependencies.xml"/>
  <import file="targets/cruise-control/continuous-integration.xml"/>
  <import file="targets/install-tomcat.xml"/>
  <import file="targets/add-third-party-realm.xml"/>
  <import file="targets/create-new-resource-type.xml"/>
  <import file="targets/build-binary-snapshot.xml"/>
  <import file="targets/build-update-war.xml"/>
  <import file="targets/execute-jmeter.xml"/>
  <import file="targets/check-conf-version.xml"/>
  <import file="targets/clean.xml"/>
  <import file="targets/webapp/webapp.xml"/>
  <import file="targets/webapp/cluster.xml"/>
  <import file="targets/javadoc.xml"/>
  <import file="targets/resources.xml"/>
  <import file="targets/realms.xml"/>
  <import file="targets/cmdl.xml"/>
  <import file="targets/test.xml"/>
  <import file="targets/config.xml"/>
  <import file="targets/build-artifacts.build.xml"/>
  

    
  <target name="init" description="Initialize all parameters and other settings">
    <echo>INFO: Building with ${ant.version} and Java version ${ant.java.version} (JAVA_HOME=${java.home}, User: ${user.name})</echo>

    <echo>Yanel Home Dir: ${yanel.source.home}</echo>
    <path id="yanel.source.home.ref">
      <pathelement location="${yanel.source.home}"/>
    </path>
    <pathconvert targetos="unix" property="yanel.source.home.forward.slashes" refid="yanel.source.home.ref">
    </pathconvert>

    <property name="build.dir" location="${yanel.source.home}/build"/>
    <mkdir dir="${build.dir}"/>
    <property name="classes.dir" location="${build.dir}/classes"/>

    <mkdir dir="${log4j.path}"/>
    <path id="log4j.dir.ref">
      <pathelement location="${log4j.path}"/>
    </path>
    <pathconvert targetos="unix" property="log4j.dir.forward.slashes" refid="log4j.dir.ref">
    </pathconvert>

    <property name="log4j.file" location="${log4j.path}/log4j-cmdl.log"/>
    <path id="log4j.file.ref">
      <pathelement location="${log4j.file}"/>
    </path>
    <pathconvert targetos="unix" property="log4j.file.forward.slashes" refid="log4j.file.ref">
    </pathconvert>
<!--
    <echo>Log4j file with forward slashes: ${log4j.file.forward.slashes}</echo>
-->

<!--
<property name="default.tomcat.home.dir" value="${yanel.source.home}/local/apache-tomcat-${tomcat.version}"/>
-->
    <property name="default.tomcat.home.dir" location="${yanel.source.home}/local/apache-tomcat-${tomcat.version}"/>
    <path id="default.tomcat.home.dir.ref">
      <pathelement location="${default.tomcat.home.dir}"/>
    </path>
    <pathconvert targetos="unix" property="default.tomcat.home.dir.forward.slashes" refid="default.tomcat.home.dir.ref"/>
  </target>
    
  <target name="set-classpath" description="Set classpath" depends="init, dependencies">
    <echo>INFO: Set classpath ...</echo>
    <path id="classpath.compile">
      <!--
      <fileset dir="${yanel.source.home}/lib">
        <include name="*.jar"/>
      </fileset>
      -->
      <pathelement path="${maven2.cp}"/>
      <pathelement path="${maven2.compile.cp}"/>
    </path>
  </target>


  <target name="compile-core-classes" description="Compile Java classes of Yanel core" depends="init, set-classpath">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${yanel.source.home}/src/core/java/org/wyona/yanel/core"
      destdir="${classes.dir}"
      source="${source.java.version}"
      target="${target.java.version}"
      encoding="${javac.encoding}"
      debug="true">
      <classpath refid="classpath.compile"/>
    </javac>
  </target>

  <target name="install-core-jar" description="Install Yanel core JAR" depends="compile-core-classes">
    <yanel:install-jar id="core"/>
  </target>

  <target name="compile-core" depends="compile-core-classes, install-core-jar">
  </target>

  <target name="compile-neutron-classes" description="Compile Java classes of Neutron implementation" depends="init, set-classpath">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${yanel.source.home}/src/neutron/java/org/wyona/neutron"
      destdir="${classes.dir}"
      source="${source.java.version}"
      target="${target.java.version}"
      encoding="${javac.encoding}"
      debug="true">
      <classpath refid="classpath.compile"/>
    </javac>
  </target>

  <target name="install-neutron-jar" description="Install Neutron implementation JAR" depends="compile-neutron-classes">
    <wyona-tools:install-jar source-home="${yanel.source.home}" version="${yanel.source.version}" id="neutron"/>
  </target>

  <target name="compile-neutron" depends="compile-neutron-classes, install-neutron-jar">
  </target>

  <target name="compile-impl-classes" description="Compile Java classes of Yanel implementation" depends="init, compile-core">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${yanel.source.home}/src/impl/java/org/wyona/yanel/impl"
      destdir="${classes.dir}"
      encoding="${javac.encoding}"
      debug="true">
      <classpath refid="classpath.compile"/>
    </javac>
  </target>

  <target name="install-impl-jar" description="Install Yanel implementation JAR" depends="compile-impl-classes">
    <yanel:install-jar id="impl"/>
  </target>

  <target name="compile-impl" depends="compile-impl-classes, install-impl-jar">
  </target>

  <target name="source-snapshot" description="Create a source code snapshot" depends="init">

    <!-- DOCU: http://subclipse.tigris.org/svnant/svn.html -->
    <svnant:svn username="anonymous" password="anonymous">
      <info target="http://svn.wyona.com/repos/public/yanel/trunk" verbose="false"/>
    </svnant:svn>
    <echo>Most recent revision on remote server: ${svn.info.rev}</echo>

    <fail message="No revision specified yet! Please configure property 'yanel.revision' within 'src/build/local.build.properties'.">
      <condition>
        <equals arg1="${yanel.revision}" arg2="REVISION"/>
      </condition>
    </fail>
    <!-- TODO: Or use the most recent revision of remote server (see above: svn.info.rev) -->

    <property name="snapshot.dir" value="${build.dir}/source-snapshots/wyona-yanel-${yanel.source.version}-src"/>
    <fail message="Directory already exists: '${snapshot.dir}'. Either delete this directory or use a different version/revision!">
      <condition>
        <available file="${snapshot.dir}" type="dir"/>
      </condition>
    </fail>
    <mkdir dir="${build.dir}/source-snapshots"/>

<!-- Start exporting source code from Subversion -->
    <echo>Start exporting source from SVN, revision: ${yanel.revision}</echo>
    <svnant:svn username="anonymous" password="anonymous">
      <export
       revision="${yanel.revision}"
       srcUrl="http://svn.wyona.com/repos/public/yanel/trunk"
       destPath="${snapshot.dir}"
      />
    </svnant:svn>
<!-- End exporting source code from SVN -->

    <replace file="${snapshot.dir}/src/build/build.properties" value="${yanel.revision}">
      <replacetoken>REVISION</replacetoken>
    </replace>

    <zip destfile="${snapshot.dir}.zip">
      <zipfileset dir="${snapshot.dir}" prefix="wyona-yanel-${yanel.source.version}-src" filemode="755"/>
    </zip>
  </target>
  
  <target name="final-message">
    <echo/>
    <echo/>
    <echo message="*****************************************************************"/>
    <echo message="*"/>
    <echo message="* You have successfully built Yanel ${yanel.version} (Revision ${yanel.revision})"/>
    <echo message="*"/>
    <echo message="*"/>
    <echo message="* Start using Yanel by typing"/>
    <echo message="*"/>
    <if>
     <equals arg1="${isWindows}" arg2="true" />
     <then>
       <echo message="*      Tomcat:      yanel start"/>
     </then>
    </if>
    <if>
     <equals arg1="${isUnix}" arg2="true" />
     <then>
       <echo  message="*      Tomcat:    ./yanel.sh start"/>
     </then>
    </if>
    <echo message="*"/>
    <echo message="*                   and browse to "/>
    <echo message="*"/>
    <echo message="*                   http://127.0.0.1:8080/${servlet.context.prefix}/"/>
    <echo message="*"/>
<!--
    <echo message="*      Jetty:       yanel start-jetty"/> 
    <echo message="*"/>
    <echo message="*                   and browse to "/>
    <echo message="*"/> 
    <echo message="*                   http://127.0.0.1:8888"/>
-->
    <echo message="*"/>
    <echo message="* Thanks for using Yanel"/>
    <echo message="*"/>
    <echo message="*****************************************************************"/>
  </target>

  <target name="quick-start" description="Quick start (will install/configure Tomcat and Yanel automatically)">
    <echo>Quick Start</echo>
    <property name="answerCleanTomcatClusterNode1" value="yes"/>
    <property name="answerDeleteLocalBuildProperties" value="yes"/>
    <property name="answerDeleteLocalConfigDir" value="NO"/>
    <antcall target="clean-all"/>

    <property name="answerContinueConfig" value="NO"/> <!-- No further configuration -->
    <property name="question.ports" value="YES"/> <!-- Assume that all ports are available -->
    <property name="answerReconfigureTomcat1" value="no"/> <!-- No SSL -->
    <property name="answerAskForCustomTomcatPath" value="NO"/> <!-- No custom Tomcat -->
    <antcall target="config"/> <!-- IMPORTANT: The config target is reloading the file local.build.properties, but please be aware that only properties which have not been set yet can be set! -->

    <property name="answerCopyEndorsedJar" value="YES"/> <!-- add endorsed libs -->
    <antcall target="deploy-to-tomcat"/>
  </target>

</project>
