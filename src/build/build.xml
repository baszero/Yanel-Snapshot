<?xml version="1.0"?>

<project name="yanel-main" default="deploy" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
  <description>Yanel Build</description>

  <property file="local.build.properties"/>
  <property file="build.properties"/>
  
  <condition property="isWindows">
   <os family="windows"/>
  </condition>
  
  <condition property="isUnix">
   <os family="unix"/>
  </condition>

  <import file="dependencies.xml"/>
  <import file="continuous-integration.xml"/>
  <import file="targets/install-tomcat.xml"/>
  <import file="targets/add-third-party-realm.xml"/>
  <import file="targets/create-new-resource-type.xml"/>
  <import file="targets/build-binary-snapshot.xml"/>
  <import file="targets/build-update-war.xml"/>
  <import file="targets/execute-jmeter.xml"/>
  
  <target name="ask-to-reconfigure-tomcat-cluster-node1" description="reconfigure Tomcat cluster node 1" if="isTomcat1PortsSet">
    <input message="Do you want to reconfigure tomcat cluster node 1 in order to support SSL? (YES/no):" defaultvalue="NO" addproperty="answerReconfigureTomcat1"/>
    <condition property="doNotReconfigureTomcat1">
      <equals arg1="no" arg2="${answerReconfigureTomcat1}"/>
    </condition>
    <antcall target="reconfigure-tomcat-cluster-node1"/>
    <antcall target="comment-local-tomcat1-ports"/>
  </target>
  
  <target name="comment-local-tomcat1-ports" if="doNotReconfigureTomcat1" description="Comment ports of Tomcat Cluster Node 1 within local.build.properties">
    <replace file="${yanel.home.dir}/src/build/local.build.properties" value="#tomcat1.ssl.port=${tomcat1.ssl.port}">
      <replacetoken>tomcat1.ssl.port=8443</replacetoken>
<!--
      <replacetoken>tomcat1.ssl.port=${tomcat1.ssl.port}</replacetoken>
-->
    </replace>
    <replace file="${yanel.home.dir}/src/build/local.build.properties" value="#tomcat1.http.port=${tomcat1.http.port}">
      <replacetoken>tomcat1.http.port=8080</replacetoken>
<!--
      <replacetoken>tomcat1.http.port=${tomcat1.http.port}</replacetoken>
-->
    </replace>
  </target>

  <target name="reconfigure-tomcat-cluster-node1" unless="doNotReconfigureTomcat1" description="reconfigures tomcat regarding ssl">
    <!-- TODO: Ask the port numbers -->

<!--
    <replace file="${yanel.home.dir}/src/build/local.build.properties" value="tomcat1.http.port=8080">
      <replacetoken>#tomcat1.http.port=9190</replacetoken>
    </replace>
    <replace file="${yanel.home.dir}/src/build/local.build.properties" value="tomcat1.ssl.port=8443">
      <replacetoken>#tomcat1.ssl.port=9143</replacetoken>
    </replace>
-->

    <antcall target="createCK"/>
    <copy file="${build.dir}/${certificate.keystore}" todir="${tomcat1.home.dir}"/>
    <xslt in="${tomcat1.home.dir}/conf/server.xml"
          out="${tomcat1.home.dir}/conf/server.xml.ssl"
          style="connector.xsl">
      <param name="ssl-port" expression="${tomcat1.ssl.port}"/>
      <param name="keystoreFile" expression="${certificate.keystore}"/>
      <param name="keystorePass" expression="${certificate.keypass}"/>
      <param name="http-port" expression="${tomcat1.http.port}"/>
    </xslt>
    <tstamp>
      <format property="timestamp" pattern="yyyyMMdd'T'HHmmss"/>
    </tstamp>
    <copy file="${tomcat1.home.dir}/conf/server.xml" tofile="${tomcat1.home.dir}/conf/server.xml.BAK_${timestamp}"/>
    <move file="${tomcat1.home.dir}/conf/server.xml.ssl" tofile="${tomcat1.home.dir}/conf/server.xml"/>
  </target>
  
  <target name="ask-to-reconfigure-tomcat-cluster-node2" description="reconfigure Tomcat cluster node 2" if="isTomcat2HomeSet">
    <input message="Do you want to reconfigure tomcat cluster node 2 in order to support SSL? (yes/NO):" defaultvalue="NO" addproperty="answerReconfigureTomcat2"/>
    <condition property="reconfigureTomcat2">
      <equals arg1="yes" arg2="${answerReconfigureTomcat2}"/>
    </condition>
    <antcall target="reconfigure-tomcat-cluster-node2"/>
  </target>
  
  <target name="reconfigure-tomcat-cluster-node2" if="reconfigureTomcat2" description="reconfigures tomcat regarding ssl">
    <antcall target="createCK"/>
    <copy file="${build.dir}/${certificate.keystore}" todir="${tomcat2.home.dir}"/>
    <xslt in="${tomcat2.home.dir}/conf/server.xml"
          out="${tomcat2.home.dir}/conf/server.xml.ssl"
          style="connector.xsl">
      <param name="ssl-port" expression="${tomcat2.ssl.port}"/>
      <param name="keystoreFile" expression="${certificate.keystore}"/>
      <param name="keystorePass" expression="${certificate.keypass}"/>
      <param name="http-port" expression="${tomcat2.http.port}"/>
    </xslt>
    <tstamp>
      <format property="timestamp" pattern="yyyyMMdd'T'HHmmss"/>
    </tstamp>
    <copy file="${tomcat2.home.dir}/conf/server.xml" tofile="${tomcat2.home.dir}/conf/server.xml.BAK_${timestamp}"/>
    <move file="${tomcat2.home.dir}/conf/server.xml.ssl" tofile="${tomcat2.home.dir}/conf/server.xml"/>
  </target>
  
  <target name="createCK" description="Add ssl configuration to your webserver"> 
    <!-- delete already created file -->
    <delete file="${build.dir}/${certificate.keystore}"/>
    <!-- create new keystore file -->
    <exec executable="keytool">
      <arg line="-genkey"/>
      <arg line="-alias"/>
      <arg value="${servlet.container}"/>
      <arg line="-keyalg"/>
      <arg value="RSA"/>
      <arg line="-storepass"/>
      <arg value="${certificate.keypass}"/>
      <arg line="-keypass"/>
      <arg value="${certificate.keypass}"/>
      <arg line="-keystore"/>
      <arg value="${build.dir}/${certificate.keystore}"/>
      <arg line="-dname"/>
      <arg value="CN=${certificate.common.name}, OU=${certificate.organisation.unit}, O=${certificate.organisation}, L=${certificate.locality.name}, S=${certificate.state.name}, C=${certificate.country.code}"/>
    </exec>
  </target>
  
  <target name="config" description="Initialize all local properties files" depends="init">
    <condition property="local.build.properties.does.not.exist.yet">
      <not>
        <available file="local.build.properties" type="file"/>
      </not>
    </condition>
    <antcall target="create-local-build-properties"/>

    <!-- Reload local.build.properties -->
    <property file="local.build.properties"/>

<!--
    <echo>Tomcat Ports: ${tomcat1.ssl.port}, ${tomcat1.http.port}</echo>
-->
  
    <condition property="isTomcat1PortsSet">
      <and>
        <isset property="tomcat1.ssl.port"/>
        <isset property="tomcat1.http.port"/>
      </and>
    </condition>
    <antcall target="ask-to-reconfigure-tomcat-cluster-node1"/>
    
    <condition property="isTomcat2HomeSet">
      <isset property="tomcat2.home.dir"/>
    </condition>
    <antcall target="ask-to-reconfigure-tomcat-cluster-node2"/>

    <antcall target="first-time-user-configuration-message"/>
    <input message="Do you want to continue the configuration nevertheless? (yes/NO)" addproperty="answer" defaultvalue="NO"/>

    <condition property="yes.continue">
      <equals arg1="yes" arg2="${answer}"/>
    </condition>
    <antcall target="configure-local"/>
  </target>

  <target name="first-time-user-configuration-message">
    <echo>#################################################################################</echo>
    <echo># As a first time user one does NOT have to configure anything any further, but #</echo>
    <echo># rather exit here and just run build.sh on UNIX resp. build.bat on Windows!    #</echo>
    <echo>#################################################################################</echo>
  </target>

  <target name="create-local-build-properties" if="local.build.properties.does.not.exist.yet" depends="init">
    <echo>Build configuration ${yanel.home.dir}/local.build.properties does not exist yet!</echo>

    <input message="Do you have an existing Tomcat instance which you want to use as servlet engine for Yanel? If so, please enter the path of your Tomcat instance (e.g. /home/yanel/jakarta-tomcat-5.0.30), or otherwise just hit return (recommended to first time users :-) and Tomcat ${tomcat.version} will be installed at ${default.tomcat.home.dir} (You will always be able to change this setting at some later time within src/build/local.build.properties): " defaultvalue="${default.tomcat.home.dir.forward.slashes}" addproperty="pathOfUserSpecificTomcat"/>

    <echo>User specific Tomcat: ${pathOfUserSpecificTomcat}</echo>

    <copy file="${yanel.home.dir}/src/build/build.properties" tofile="${yanel.home.dir}/src/build/local.build.properties" overwrite="false"/>
    <replace file="${yanel.home.dir}/src/build/local.build.properties" value="tomcat1.home.dir=${pathOfUserSpecificTomcat}">
      <replacetoken>#tomcat1.home.dir=../tomcat-cluster/build/jakarta-tomcat-5.0.30-cnode1</replacetoken>
    </replace>

    <condition property="yes.install.default.tomcat">
      <equals arg1="${pathOfUserSpecificTomcat}" arg2="${default.tomcat.home.dir.forward.slashes}"/>
    </condition>

    <antcall target="install-default-tomcat"/>
  </target>

  <target name="configure-local" if="yes.continue">
    <echo>Will now create local properties files if these do not exist.</echo>

    <mkdir dir="${yanel.home.dir}/${local.config.dir}"/>

    <copy file="${yanel.home.dir}/conf/yanel.xml" tofile="${yanel.home.dir}/${local.config.dir}/local.yanel.xml" overwrite="false"/>
    <copy file="${yanel.home.dir}/conf/realms.xml" tofile="${yanel.home.dir}/${local.config.dir}/local.realms.xml" overwrite="false"/>
    <copy file="${yanel.home.dir}/conf/resource-types.xml" tofile="${yanel.home.dir}/${local.config.dir}/local.resource-types.xml" overwrite="false"/>
    <copy file="${yanel.home.dir}/conf/log4j.properties" tofile="${yanel.home.dir}/${local.config.dir}/local.log4j.properties" overwrite="false"/>

    <echo>Customize the ${local.config.dir}/local.* files and run build.sh OR run build.sh first and then customize the config files within build/webapps/yanel/WEB-INF/classes</echo>
  </target>
    
  <target name="init" description="Initialize all parameters and other settings" depends="dependencies">
    <echo>Building with ${ant.version} and Java version ${ant.java.version}</echo>

<!--
    <dirname property="build.src.dir" file="${ant.file}"/>
    <dirname property="src.dir" file="${build.src.dir}"/>
    <dirname property="yanel.home.dir" file="${src.dir}"/>
-->
    <property name="yanel.home.dir" location="../../"/>
<!--
    <echo>Yanel Home Dir: ${yanel.home.dir}</echo>
-->
    <path id="yanel.home.dir.ref">
      <pathelement location="${yanel.home.dir}"/>
    </path>
    <pathconvert targetos="unix" property="yanel.home.dir.forward.slashes" refid="yanel.home.dir.ref">
    </pathconvert>

    <property name="build.dir" location="${yanel.home.dir}/build"/>
    <mkdir dir="${build.dir}"/>
    <property name="classes.dir" location="${build.dir}/classes"/>
    <property name="log4j.path" location="${build.dir}/logs"/>
    <property name="log4j.file" location="${log4j.path}/log4j.log"/>
    <path id="log4j.file.ref">
      <pathelement location="${log4j.file}"/>
    </path>
    <pathconvert targetos="unix" property="log4j.file.forward.slashes" refid="log4j.file.ref">
    </pathconvert>
<!--
    <echo>Log4j file with forward slashes: ${log4j.file.forward.slashes}</echo>
-->

<!--
<property name="default.tomcat.home.dir" value="${yanel.home.dir}/local/apache-tomcat-${tomcat.version}"/>
-->
    <property name="default.tomcat.home.dir" location="${yanel.home.dir}/local/apache-tomcat-${tomcat.version}"/>
    <path id="default.tomcat.home.dir.ref">
      <pathelement location="${default.tomcat.home.dir}"/>
    </path>
    <pathconvert targetos="unix" property="default.tomcat.home.dir.forward.slashes" refid="default.tomcat.home.dir.ref"/>

    <path id="classpath">
      <!--
      <fileset dir="${yanel.home.dir}/lib">
        <include name="*.jar"/>
      </fileset>
      -->
      <pathelement path="${maven2.cp}"/>
    </path>


    <path id="classpath.yanel">
      <fileset dir="${yanel.home.dir}/build/lib">
        <include name="*.jar"/>
      </fileset>
      <pathelement path="${maven2.cp}"/>
    </path>


    <path id="classpath.cmdl">
      <pathelement path="${maven2.cp}"/>
    </path>
  </target>

  <target name="init-runtime" description="Initialize all parameters and other settings for runtime" depends="init">
<!--
  <target name="init-runtime" description="Initialize all parameters and other settings for runtime" depends="webapp">
-->

    <path id="classpath.run">
      <!-- Properties files -->
      <pathelement path="${yanel.home.dir}/build/webapps/${servlet.context.prefix}/WEB-INF/classes"/>

      <!-- All from source generated libs -->
      <fileset dir="${yanel.home.dir}/build/webapps/${servlet.context.prefix}/WEB-INF/lib">
        <include name="*.jar"/>
      </fileset>

      <!-- All external dependencies -->
      <!--
      <pathelement path="${maven2.cp}"/>
      -->
    </path>
    <property name="run.cp" refid="classpath.run"/>
<!--
    <echo>Classpath to run yanel: ${run.cp}</echo>
-->
  </target>

  <target name="compile-core" description="Compile Java classes of Yanel core" depends="init">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${yanel.home.dir}/src/core/java/org/wyona/yanel/core" destdir="${classes.dir}" debug="true">
      <classpath refid="classpath"/>
    </javac>
    <mkdir dir="${yanel.home.dir}/build/lib"/>
    <jar destfile="${yanel.home.dir}/build/lib/yanel-core-${yanel.version}-r${yanel.revision}.jar"
      basedir="${classes.dir}"
      includes="org/wyona/yanel/core/**"/>

    <copy file="${yanel.home.dir}/src/build/pom-core.xml" todir="${yanel.home.dir}/build/lib"/>
    <replace file="${yanel.home.dir}/build/lib/pom-core.xml" value="${yanel.version}-r${yanel.revision}">
      <replacetoken>@VERSION@</replacetoken>
    </replace>

    <artifact:pom id="core.project" file="${yanel.home.dir}/build/lib/pom-core.xml"/>

    <artifact:install file="${yanel.home.dir}/build/lib/yanel-core-${yanel.version}-r${yanel.revision}.jar">
      <pom refid="core.project"/>
    </artifact:install>
  </target>

  <target name="compile-impl" description="Compile Java classes of Yanel implementation" depends="init">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${yanel.home.dir}/src/impl/java/org/wyona/yanel/impl" destdir="${classes.dir}" debug="true">
      <classpath refid="classpath"/>
    </javac>

    <mkdir dir="${yanel.home.dir}/build/lib"/>
    <jar destfile="${yanel.home.dir}/build/lib/yanel-impl-${yanel.version}-r${yanel.revision}.jar"
      basedir="${classes.dir}"
      includes="org/wyona/yanel/impl/**"/>
  </target>

  <target name="compile-cmdl" description="Compile Java classes of Yanel command line" depends="init">
    <mkdir dir="${classes.dir}"/>
    <!-- TODO: Make util classes available also for webapp, etc. -->
    <javac srcdir="${yanel.home.dir}/src/core/java/org/wyona/yanel/util" destdir="${classes.dir}" debug="true">
      <classpath refid="classpath"/>
    </javac>
    <javac srcdir="${yanel.home.dir}/src/core/java/org/wyona/yanel/cmdl" destdir="${classes.dir}"
      debug="true"
      classpathref="classpath.cmdl"
    />
    <mkdir dir="${yanel.home.dir}/build/lib"/>
    <jar destfile="${yanel.home.dir}/build/lib/yanel-cmdl-${yanel.version}-r${yanel.revision}.jar"
      basedir="${classes.dir}"
      includes="org/wyona/yanel/cmdl/**,org/wyona/yanel/util/**"/>
  </target>

  <target name="compile-webapp" description="Compile Java classes of Yanel webapp" depends="init, compile-core, compile-cmdl">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${yanel.home.dir}/src/core/java/org/wyona/yanel/servlet" destdir="${classes.dir}"
      debug="true"
      classpathref="classpath"
    />
    <mkdir dir="${yanel.home.dir}/build/lib"/>
    <jar destfile="${yanel.home.dir}/build/lib/yanel-webapp-${yanel.version}-r${yanel.revision}.jar"
      basedir="${classes.dir}"
      includes="org/wyona/yanel/servlet/**"/>
  </target>

  <!-- TODO: Invoice depends on impl ...! -->
  <target name="webapp" description="Build webapp" depends="init, compile-core, compile-impl, build-resources, compile-webapp">
<!--
  <target name="webapp" description="Build webapp" depends="init, compile-webapp">
-->
    <mkdir dir="${build.dir}/webapps/${servlet.context.prefix}"/>
    <copy todir="${build.dir}/webapps/${servlet.context.prefix}">
      <fileset dir="${yanel.home.dir}/src/webapp"/>
    </copy>

    <!-- TODO: Copy only core, impl, webapp, but NOT cmdl, etc. -->
    <copy todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/lib">
      <fileset dir="${yanel.home.dir}/build/lib"/>
    </copy>

    <antcall target="deploy-resources"/>

<!--
    <copy todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes">
      <fileset dir="${yanel.home.dir}/lib">
        <include name="*.properties"/>
        <exclude name="local.*.properties"/>
      </fileset>
    </copy>
-->
    <copy file="${yanel.home.dir}/conf/CatalogManager.properties" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>
    <copy file="${yanel.home.dir}/conf/catalog.xml" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>
    <copy todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/entities" overwrite="false">
      <fileset dir="${yanel.home.dir}/conf/entities"/>
    </copy>

    <copy file="${yanel.home.dir}/conf/spring-yanel-config.xml" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>
    <copy file="${yanel.home.dir}/conf/realms.xml" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>
    <copy file="${yanel.home.dir}/conf/log4j.properties" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>
    <!-- Create yanel.xml -->
    <condition property="local.yanel.config.exists">
      <available file="${yanel.home.dir}/${local.config.dir}/local.yanel.xml" type="file"/>
    </condition>
    <antcall target="generate-yanel-properties"/>
    <antcall target="generate-resource-types-regisitry"/>


    <!-- Overwrite default by local properties -->
    <!-- TODO: Make the patching selectable within the build.properties of the build ... -->
    <copy file="${yanel.home.dir}/${local.config.dir}/local.log4j.properties" tofile="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/log4j.properties" overwrite="true" failonerror="false"/>
    <copy file="${yanel.home.dir}/${local.config.dir}/local.realms.xml" tofile="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/realms.xml" overwrite="true" failonerror="false"/>
    <antcall target="patch-with-local-yanel-config"/>
    <antcall target="patch-with-local-resource-types-regisitry"/>


    <!-- Patch properties ... -->

    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yanel.xml" value="${yanel.home.dir.forward.slashes}">
      <replacetoken>..</replacetoken>
    </replace>

    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/realms.xml" value="${yanel.home.dir.forward.slashes}/src/realms">
      <replacetoken>../src/realms</replacetoken>
    </replace>

    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/resource-types.xml" value="${yanel.home.dir.forward.slashes}/src">
      <replacetoken>../src</replacetoken>
    </replace>
    
    <copy file="${yanel.home.dir}/src/build/install.rdf" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="true"/>
    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/install.rdf" value="${yanel.version}-r${yanel.revision}">
      <replacetoken>@VERSION@</replacetoken>
    </replace>
    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/install.rdf" value="source">
      <replacetoken>@INSTALLTYPE@</replacetoken>
    </replace>

    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/log4j.properties" value="${log4j.file.forward.slashes}">
      <replacetoken>@LOG4J_FILE@</replacetoken>
    </replace>
    <mkdir dir="${log4j.path}"/>
    <touch file="${log4j.file}"/>

    <copy todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/lib">
      <fileset refid="maven2.fileset"/>
      <mapper type="flatten"/>
    </copy>

    <!-- TODO: So far only the javadoc of the core is being built -->
    <condition property="javadoc-does-not-exist-yet">
      <not>
        <available file="${build.dir}/javadoc" type="dir"/>
      </not>
    </condition>
    <antcall target="generate-javadoc"/>

    <ant antfile="${yanel.home.dir}/build/resource-types.xml" target="copy-resources-dependencies"/>
  </target>

  <target name="war" description="Build war file" depends="init, webapp">
    <jar jarfile="${yanel.home.dir}/build/webapps/${servlet.context.prefix}.war" basedir="${yanel.home.dir}/build/webapps/${servlet.context.prefix}"/>
  </target>

  <target name="deploy" description="Deploy war file" depends="init, webapp">
    <condition property="property-tomcat-cluster-node1-is-set">
      <isset property="tomcat1.home.dir"/>
    </condition>
    <condition property="property-tomcat1-ssl-port-is-set">
      <isset property="tomcat1.ssl.port"/>
    </condition>
    <antcall target="deploy-to-tomcat-cluster-node1"/>

    <condition property="property-tomcat-cluster-node2-is-set">
      <isset property="tomcat2.home.dir"/>
    </condition>
    <condition property="property-tomcat2-ssl-port-is-set">
      <isset property="tomcat2.ssl.port"/>
    </condition>
    <antcall target="deploy-to-tomcat-cluster-node2"/>

    <antcall target="final-message"/>
  </target>

  <target name="final-message">    
    <antcall target="final-message-windows"/>
    <antcall target="final-message-unix"/>
  </target>
  
  <target name="final-message-windows" if="isWindows">
    <echo message="*****************************************************************"/>
    <echo message="*"/>
    <echo message="* You have successfully built Yanel ${yanel.version} (Revision ${yanel.revision})"/>
    <echo message="*"/>
    <echo message="*"/>
    <echo message="* Start using Yanel by typing"/>
    <echo message="*"/>
    <echo message="*      Tomcat:      yanel start"/>
    <echo message="*"/>
    <echo message="*                   and browse to "/>
    <echo message="*"/>
    <echo message="*                   http://127.0.0.1:8080/${servlet.context.prefix}/"/>
    <echo message="*"/>
<!--
    <echo message="*      Jetty:       yanel start-jetty"/> 
    <echo message="*"/>
    <echo message="*                   and browse to "/>
    <echo message="*"/> 
    <echo message="*                   http://127.0.0.1:8888"/>
-->
    <echo message="*"/>
    <echo message="* Thanks for using Yanel"/>
    <echo message="*"/>
    <echo message="*****************************************************************"/>
  </target>
  
  <target name="final-message-unix" if="isUnix">
    <echo message="*****************************************************************"/>
    <echo message="*"/>
    <echo message="* You have successfully built Yanel ${yanel.version} (Revision ${yanel.revision})"/>
    <echo message="*"/>
    <echo message="*"/>
    <echo message="* Start using Yanel by typing"/>
    <echo message="*"/>
    <echo message="*      Tomcat:    ./yanel.sh start"/>
    <echo message="*"/>
    <echo message="*                 and browse to "/>
    <echo message="*"/>
    <!-- TODO: Differentiate between ROOT context and regular context prefix! -->
    <echo message="*                 http://127.0.0.1:8080/${servlet.context.prefix}/"/>
    <echo message="*"/>
<!-- TODO: Make Jetty available! -->
<!--
    <echo message="*       Jetty:    ./yanel.sh start-jetty"/>
    <echo message="*"/>
    <echo message="*                 and browse to "/>
    <echo message="*"/> 
    <echo message="*                 http://127.0.0.1:8888"/>
-->
    <echo message="*"/>
    <echo message="* Thanks for using Yanel"/>
    <echo message="*"/>
    <echo message="*****************************************************************"/>
  </target>
  
  

  <target name="deploy-to-tomcat-cluster-node1" if="property-tomcat-cluster-node1-is-set" description="Deploy webapp to Tomcat cluster node 1">
    <echo>Copy webapp (${tomcat1.webapps.dir}):</echo>

    <fail message="No such directory: ${tomcat1.webapps.dir}">
      <condition><not><available file="${tomcat1.webapps.dir}"/></not></condition>
    </fail>

    <copy todir="${tomcat1.webapps.dir}/${servlet.context.prefix}">
      <fileset dir="${yanel.home.dir}/build/webapps/${servlet.context.prefix}"/>
    </copy>

    <replace file="${tomcat1.webapps.dir}/${servlet.context.prefix}/WEB-INF/classes/log4j.properties" value="log4j-cnode1.log">
      <replacetoken>log4j.log</replacetoken>
    </replace>
    <touch file="${log4j.path}/log4j-cnode1.log"/>

    <antcall target="patch-tomcat-cluster-node-1-ssl-port"/>
    
    <condition property="ask-to-copy-endorsed-xerces-to-node1">
      <not>
        <available file="${tomcat1.home.dir}/common/endorsed/${xerces.impl.artifactId}-${xerces.impl.version}.jar"/>
      </not>
    </condition>
    <antcall target="ask-to-copy-endorsed-xerces-to-node1"/>
    
    <condition property="ask-to-copy-endorsed-xml-apis-to-node1">
      <not>
        <available file="${tomcat1.home.dir}/common/endorsed/${xml.apis.artifactId}-${xml.apis.version}.jar"/>
      </not>
    </condition>
    <antcall target="ask-to-copy-endorsed-xml-apis-to-node1"/>
    
  </target>
  
  <target name="patch-tomcat-cluster-node-1-ssl-port" if="property-tomcat1-ssl-port-is-set">
    <echo>ssl port for tomcat is set</echo>
    <xslt in="${tomcat1.home.dir}/webapps/${servlet.context.prefix}/WEB-INF/web.xml"
          out="${tomcat1.home.dir}/webapps/${servlet.context.prefix}/WEB-INF/web.xml.tmp"
          style="add-ssl-port.xsl">
      <param name="ssl-port" expression="${tomcat1.ssl.port}"/>
    </xslt>
    <move file="${tomcat1.home.dir}/webapps/${servlet.context.prefix}/WEB-INF/web.xml.tmp" tofile="${tomcat1.home.dir}/webapps/${servlet.context.prefix}/WEB-INF/web.xml"/>
  </target>
  
  <target name="patch-tomcat-cluster-node-2-ssl-port" if="property-tomcat2-ssl-port-is-set">
    <xslt in="${tomcat2.home.dir}/webapps/${servlet.context.prefix}/WEB-INF/web.xml"
          out="${tomcat2.home.dir}/webapps/${servlet.context.prefix}/WEB-INF/web.xml.tmp"
          style="add-ssl-port.xsl">
      <param name="ssl-port" expression="${tomcat2.ssl.port}"/>
    </xslt>
    <move file="${tomcat2.home.dir}/webapps/${servlet.context.prefix}/WEB-INF/web.xml.tmp" tofile="${tomcat2.home.dir}/webapps/${servlet.context.prefix}/WEB-INF/web.xml"/>
  </target>
  
  
  <target name="deploy-to-tomcat-cluster-node2" if="property-tomcat-cluster-node2-is-set" description="Deploy webapp to Tomcat cluster node 2">
    <echo>Copy webapp (${tomcat2.webapps.dir}):</echo>

    <fail message="No such directory: ${tomcat2.webapps.dir}">
      <condition><not><available file="${tomcat2.webapps.dir}"/></not></condition>
    </fail>

    <copy todir="${tomcat2.webapps.dir}/${servlet.context.prefix}">
      <fileset dir="${yanel.home.dir}/build/webapps/${servlet.context.prefix}"/>
    </copy>

    <replace file="${tomcat2.webapps.dir}/${servlet.context.prefix}/WEB-INF/classes/log4j.properties" value="log4j-cnode2.log">
      <replacetoken>log4j.log</replacetoken>
    </replace>
    <touch file="${log4j.path}/log4j-cnode2.log"/>

    <antcall target="patch-tomcat-cluster-node-2-ssl-port"/>

    <condition property="ask-to-copy-endorsed-xerces-node2">
      <not>
        <available file="${tomcat2.home.dir}/common/endorsed/${xerces.impl.artifactId}-${xerces.impl.version}.jar"/>
      </not>
    </condition>
    <antcall target="ask-to-copy-endorsed-xerces-node2"/>
    
    <condition property="ask-to-copy-endorsed-xml-apis-node2">
      <not>
        <available file="${tomcat2.home.dir}/common/endorsed/${xml.apis.artifactId}-${xml.apis.version}.jar"/>
      </not>
    </condition>
    <antcall target="ask-to-copy-endorsed-xml-apis-node2"/>
  </target>

  <target name="ask-to-copy-endorsed-xerces-to-node1" if="ask-to-copy-endorsed-xerces-to-node1">
    <input message="Endorsed lib is missing (${tomcat1.home.dir}/common/endorsed/${xerces.impl.artifactId}-${xerces.impl.version}.jar). Do you want it to be added? (YES/no):" addproperty="answer"/>
    <condition property="do-not-copy-endorsed-xerces-to-node1">
      <equals arg1="no" arg2="${answer}"/>
    </condition>
    <antcall target="do-copy-endorsed-xerces-to-node1"/>
  </target>

  <target name="ask-to-copy-endorsed-xml-apis-to-node1" if="ask-to-copy-endorsed-xml-apis-to-node1">
    <input message="Endorsed lib is missing (${tomcat1.home.dir}/common/endorsed/${xml.apis.artifactId}-${xml.apis.version}.jar). Do you want it to be added? (YES/no):" addproperty="answer"/>
    <condition property="do-not-copy-endorsed-xml-apis-to-node1">
      <equals arg1="no" arg2="${answer}"/>
    </condition>
    <antcall target="do-copy-endorsed-xml-apis-to-node1"/>
  </target>
  
  <target name="do-copy-endorsed-xerces-to-node1" unless="do-not-copy-endorsed-xerces-to-node1">
    <copy file="${yanel.home.dir}/build/webapps/${servlet.context.prefix}/WEB-INF/lib/${xerces.impl.artifactId}-${xerces.impl.version}.jar" todir="${tomcat1.home.dir}/common/endorsed" overwrite="false"/>
  </target>
  
  <target name="do-copy-endorsed-xml-apis-to-node1" unless="do-not-copy-endorsed-xml-apis-to-node1">
    <copy file="${yanel.home.dir}/build/webapps/${servlet.context.prefix}/WEB-INF/lib/${xml.apis.artifactId}-${xml.apis.version}.jar" todir="${tomcat1.home.dir}/common/endorsed" overwrite="false"/>
  </target>

  <target name="ask-to-copy-endorsed-xerces-node2" if="ask-to-copy-endorsed-xerces-node2">
    <input message="Endorsed lib is missing (${tomcat2.home.dir}/common/endorsed/${xerces.impl.artifactId}-${xerces.impl.version}.jar). Do you want it to be added? (yes/NO):" addproperty="answer"/>
    <condition property="yes-do-copy-endorsed-xerces-node2">
      <equals arg1="yes" arg2="${answer}"/>
    </condition>
    <antcall target="do-copy-endorsed-xerces-node2"/>
  </target>
  
  <target name="do-copy-endorsed-xerces-node2" if="yes-do-copy-endorsed-xerces-node2">
    <copy file="${yanel.home.dir}/build/webapps/${servlet.context.prefix}/WEB-INF/lib/${xerces.impl.artifactId}-${xerces.impl.version}.jar" todir="${tomcat2.home.dir}/common/endorsed" overwrite="false"/>
  </target>

  <target name="ask-to-copy-endorsed-xml-apis-node2" if="ask-to-copy-endorsed-xml-apis-node2">
    <input message="Endorsed lib is missing (${tomcat2.home.dir}/common/endorsed/${xml.apis.artifactId}-${xml.apis.version}.jar). Do you want it to be added? (yes/NO):" addproperty="answer"/>
    <condition property="yes-do-copy-endorsed-xml-apis-node2">
      <equals arg1="yes" arg2="${answer}"/>
    </condition>
    <antcall target="do-copy-endorsed-xml-apis-node2"/>
  </target>
  
  <target name="do-copy-endorsed-xml-apis-node2" if="yes-do-copy-endorsed-xml-apis-node2">
    <copy file="${yanel.home.dir}/build/webapps/${servlet.context.prefix}/WEB-INF/lib/${xml.apis.artifactId}-${xml.apis.version}.jar" todir="${tomcat2.home.dir}/common/endorsed" overwrite="false"/>
  </target>

  <target name="clean" description="Clean build" depends="init, clean-resources">
    <delete includeemptydirs="true">
      <fileset dir="${build.dir}" excludes="logs/**, javadoc/**"/>
    </delete>

    <condition property="yes-delete-tomcat-cluster-node1">
      <and>
        <isset property="tomcat1.home.dir"/>
        <available file="${tomcat1.webapps.dir}/${servlet.context.prefix}" type="dir"/>
        <istrue value="${force-clean}"/>
      </and>
    </condition>
    <antcall target="do-clean-tomcat-cluster-node1"/>

    <condition property="property-tomcat-cluster-node1-is-set">
      <and>
        <isset property="tomcat1.home.dir"/>
        <available file="${tomcat1.webapps.dir}/${servlet.context.prefix}" type="dir"/>
      </and>
    </condition>
    <antcall target="ask-to-clean-tomcat-cluster-node1"/>


    <condition property="yes-delete-tomcat-cluster-node2">
      <and>
        <isset property="tomcat1.home.dir"/>
        <available file="${tomcat1.webapps.dir}/${servlet.context.prefix}" type="dir"/>
        <istrue value="${force-clean}"/>
      </and>
    </condition>
    <antcall target="do-clean-tomcat-cluster-node2"/>
    
    <condition property="property-tomcat-cluster-node2-is-set">
      <and>
        <isset property="tomcat2.home.dir"/>
        <available file="${tomcat2.webapps.dir}/${servlet.context.prefix}" type="dir"/>
      </and>
    </condition>
    <antcall target="ask-to-clean-tomcat-cluster-node2"/>
  </target>

  <target name="clean-all" description="Clean All (including local configuration!)" depends="init, clean">
    <delete dir="${build.dir}"/>
    <delete dir="${yanel.home.dir}/local"/>
<!--
    <delete file="${yanel.home.dir}/src/build/local.build.properties"/>
    <delete dir="${yanel.home.dir}/${local.config.dir}"/>
-->
  </target>

  <target name="ask-to-clean-tomcat-cluster-node1" if="property-tomcat-cluster-node1-is-set" description="Clean Tomcat cluster node 1">
    <input message="Do you really want to delete your deployed (maybe productive) Yanel version at '${tomcat1.webapps.dir}/${servlet.context.prefix}'? (yes/NO):" addproperty="answer"/>
    <condition property="yes-delete-tomcat-cluster-node1">
      <equals arg1="yes" arg2="${answer}"/>
    </condition>
    <antcall target="do-clean-tomcat-cluster-node1"/>
  </target>

  <target name="do-clean-tomcat-cluster-node1" if="yes-delete-tomcat-cluster-node1" description="Clean Tomcat cluster node 1">
    <echo>Clean Tomcat cluster node 1:</echo>

    <fail message="No such directory: ${tomcat1.webapps.dir}">
      <condition><not><available file="${tomcat1.webapps.dir}"/></not></condition>
    </fail>

    <delete dir="${tomcat1.webapps.dir}/${servlet.context.prefix}"/>
    <delete dir="${tomcat1.work.dir}/${servlet.context.prefix}"/>
  </target>

  <target name="ask-to-clean-tomcat-cluster-node2" if="property-tomcat-cluster-node2-is-set" description="Clean Tomcat cluster node 2">
    <input message="Do you really want to delete your deployed (maybe productive) Yanel version at '${tomcat2.webapps.dir}/${servlet.context.prefix}'? (yes/NO):" addproperty="answer"/>
    <condition property="yes-delete-tomcat-cluster-node2">
      <equals arg1="yes" arg2="${answer}"/>
    </condition>
    <antcall target="do-clean-tomcat-cluster-node2"/>
  </target>

  <target name="do-clean-tomcat-cluster-node2" if="yes-delete-tomcat-cluster-node2" description="Clean Tomcat cluster node 2">
    <echo>Clean Tomcat cluster node 2:</echo>

    <fail message="No such directory: ${tomcat2.webapps.dir}">
      <condition><not><available file="${tomcat2.webapps.dir}"/></not></condition>
    </fail>

    <delete dir="${tomcat2.webapps.dir}/${servlet.context.prefix}"/>
    <delete dir="${tomcat2.work.dir}/${servlet.context.prefix}"/>
  </target>

  <target name="javadoc" description="Generate Javadoc" depends="init">
    <mkdir dir="${build.dir}/javadoc"/>
    <javadoc
      packagenames="org.*"
      sourcepath="${yanel.home.dir}/src/core/java"
      destdir="${yanel.home.dir}/build/javadoc"
      classpathref="classpath.run"
    >
    </javadoc>
  </target>

  <target name="generate-javadoc" description="Generate Javadoc" if="javadoc-does-not-exist-yet">
    <antcall target="javadoc"/>
  </target>

  <target name="run-yanel-cmdl" description="Run command line tool" depends="init-runtime">
    <echo>Yanel Path: ${yanel.path}</echo>
    <!--
    <exec executable="java">
      <arg line="-classpath ${run.cp} org.wyona.yanel.cmdl.YanelCommandLine"/>
    </exec>
    -->
    <java classname="org.wyona.yanel.cmdl.YanelCommandLine">
      <classpath refid="classpath.run"/>
      <arg value="${yanel.path}"/>
      <!-- On Linux, Java 1.4.2 needs this sysproperty whereas on Mac OS X it doesn't seem to be necessary -->
      <sysproperty key="org.xml.sax.driver" value="org.apache.xerces.parsers.SAXParser"/>
    </java>
  </target>

  <target name="generate-resources-build" description="Generate resources build" depends="init">
    <condition property="local.resource-types.config.exists">
      <available file="${yanel.home.dir}/${local.config.dir}/local.resource-types.xml" type="file"/>
    </condition>
    <antcall target="generate-resources-build-from-default"/>
    <antcall target="generate-resources-build-from-local"/>
  </target>

  <target name="generate-resources-build-from-default" description="Generate resources build from default config" depends="init" unless="local.resource-types.config.exists">
    <xslt in="${yanel.home.dir}/conf/resource-types.xml" out="../../build/resource-types.xml" style="yanel2resources.xsl" force="false">
      <param name="servlet.context.prefix" expression="${servlet.context.prefix}"/>
      <param name="yanel.source.version" expression="${yanel.version}-r${yanel.revision}"/>
    </xslt>
  </target>

  <target name="generate-resources-build-from-local" description="Generate resources build from local config" depends="init" if="local.resource-types.config.exists">
    <xslt in="${yanel.home.dir}/${local.config.dir}/local.resource-types.xml" out="../../build/resource-types.xml" style="yanel2resources.xsl" force="true">
      <param name="servlet.context.prefix" expression="${servlet.context.prefix}"/>
      <param name="yanel.source.version" expression="${yanel.version}-r${yanel.revision}"/>
    </xslt>
  </target>

  <target name="build-resources" description="Build resources" depends="generate-resources-build">
    <ant antfile="${yanel.home.dir}/build/resource-types.xml" target="build-resources"/>
  </target>

  <target name="deploy-resources" description="Deploy resources" depends="generate-resources-build">
  
    <copy todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/">
      <fileset dir="." casesensitive="yes">
        <include name="global_*.properties"/>
      </fileset>
    </copy>
    
    <ant antfile="${yanel.home.dir}/build/resource-types.xml" target="deploy-resources"/>
  </target>

  <target name="clean-resources" description="Clean resources" depends="generate-resources-build">
    <ant antfile="${yanel.home.dir}/build/resource-types.xml" target="clean-resources"/>
  </target>

  <target name="generate-yanel-properties" unless="local.yanel.config.exists">
    <xslt in="${yanel.home.dir}/conf/yanel.xml" out="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yanel.xml" style="yanel2properties.xsl" force="false">
      <param name="servlet.context.prefix" expression="${servlet.context.prefix}"/>
      <param name="yanel.revision" expression="${yanel.revision}"/>
      <param name="yanel.version" expression="${yanel.version}"/>
    </xslt>
  </target>

  <target name="patch-with-local-yanel-config" if="local.yanel.config.exists">
    <xslt in="${yanel.home.dir}/${local.config.dir}/local.yanel.xml" out="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yanel.xml" style="yanel2properties.xsl" force="true">
      <param name="servlet.context.prefix" expression="${servlet.context.prefix}"/>
      <param name="yanel.revision" expression="${yanel.revision}"/>
      <param name="yanel.version" expression="${yanel.version}"/>
    </xslt>
  </target>

  <target name="generate-resource-types-regisitry" unless="local.yanel.config.exists">
    <xslt in="${yanel.home.dir}/conf/resource-types.xml" out="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/resource-types.xml" style="resource2resourcetypereg.xsl" force="false">
      <param name="servlet.context.prefix" expression="${servlet.context.prefix}"/>
      <param name="yanel.revision" expression="${yanel.revision}"/>
      <param name="yanel.version" expression="${yanel.version}"/>
    </xslt>
  </target>

  <target name="patch-with-local-resource-types-regisitry" if="local.yanel.config.exists">
    <xslt in="${yanel.home.dir}/${local.config.dir}/local.resource-types.xml" out="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/resource-types.xml" style="resource2resourcetypereg.xsl" force="true">
      <param name="servlet.context.prefix" expression="${servlet.context.prefix}"/>
      <param name="yanel.revision" expression="${yanel.revision}"/>
      <param name="yanel.version" expression="${yanel.version}"/>
    </xslt>
  </target>
  
  <target name="test" description="Run tests">
    <ant dir="../test" target="test" inheritall="false"/>
  </target>
  
  <target name="source-snapshot" description="Create a source code snapshot" depends="init">
    <delete dir="${build.dir}/source-snapshots"/>
    <property name="snapshot.dir" value="${build.dir}/source-snapshots/wyona-yanel-SNAPSHOT-r${yanel.revision}-src"/>
    <mkdir dir="${snapshot.dir}/src"/>
    <copy file="${yanel.home.dir}/README.txt" todir="${snapshot.dir}"/>
    <copy file="${yanel.home.dir}/configure.sh" todir="${snapshot.dir}"/>
    <chmod file="${snapshot.dir}/configure.sh" perm="755"/>
    <copy file="${yanel.home.dir}/configure.bat" todir="${snapshot.dir}"/>
    <copy file="${yanel.home.dir}/build.sh" todir="${snapshot.dir}"/>
    <chmod file="${snapshot.dir}/build.sh" perm="755"/>
    <copy file="${yanel.home.dir}/build.bat" todir="${snapshot.dir}"/>
    <copy file="${yanel.home.dir}/yanel.sh" todir="${snapshot.dir}"/>
    <chmod file="${snapshot.dir}/yanel.sh" perm="755"/>
    <copy file="${yanel.home.dir}/yanel.bat" todir="${snapshot.dir}"/>
    <copy todir="${snapshot.dir}/src">
      <fileset dir="${yanel.home.dir}/src" excludes="build/local.build.properties, contributions/resources/nutch/conf/nutch-local.xml"/>
    </copy>
    <copy todir="${snapshot.dir}/tools">
      <fileset dir="${yanel.home.dir}/tools"/>
    </copy>
    <chmod dir="${snapshot.dir}/tools/apache-ant-1.6.5/bin" perm="755" includes="*"/>
    <copy todir="${snapshot.dir}/conf">
      <fileset dir="${yanel.home.dir}/conf" excludes="local/**"/>
    </copy>
    <zip destfile="${build.dir}/source-snapshots/wyona-yanel-SNAPSHOT-r${yanel.revision}-src.zip">
      <zipfileset dir="${build.dir}/source-snapshots/wyona-yanel-SNAPSHOT-r${yanel.revision}-src" prefix="wyona-yanel-SNAPSHOT-r${yanel.revision}-src" filemode="755"/>
    </zip>
  </target>

</project>
