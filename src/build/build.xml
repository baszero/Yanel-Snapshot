<?xml version="1.0"?>

<project name="yanel-main" default="deploy" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
  <description>Yanel Build</description>

  <property file="local.build.properties"/>
  <property file="build.properties"/>

  <import file="dependencies.xml"/>
  <import file="continuous-integration.xml"/>
  
  <target name="ask-to-reconfigure-tomcat-cluster-node1" description="reconfigure Tomcat cluster node 1" if="isTomcat1HomeSet">
    <input message="Do you want to reconfigure tomcat cluster node 1 in order to support SSL? (yes/NO):" defaultvalue="NO" addproperty="answerReconfigureTomcat1"/>
    <condition property="reconfigureTomcat1">
      <equals arg1="yes" arg2="${answerReconfigureTomcat1}"/>
    </condition>
    <antcall target="reconfigure-tomcat-cluster-node1"/>
  </target>
  
  <target name="reconfigure-tomcat-cluster-node1" if="reconfigureTomcat1" description="reconfigures tomcat regarding ssl">
    <antcall target="createCK"/>
    <copy file="${build.dir}/${certificate.keystore}" todir="${tomcat1.home.dir}"/>
    <xslt in="${tomcat1.home.dir}/conf/server.xml"
          out="${tomcat1.home.dir}/conf/server.xml.ssl"
          style="connector.xsl">
      <param name="portNumber" expression="${certificate.port.number}"/>
      <param name="keystoreFile" expression="${certificate.keystore}"/>
      <param name="keystorePass" expression="${certificate.keypass}"/>
      <param name="defaultPort" expression="${servlet.default.port}"/>
    </xslt>
    <tstamp>
      <format property="timestamp" pattern="yyyyMMdd'T'HHmmss"/>
    </tstamp>
    <copy file="${tomcat1.home.dir}/conf/server.xml" tofile="${tomcat1.home.dir}/conf/server.xml.BAK_${timestamp}"/>
    <move file="${tomcat1.home.dir}/conf/server.xml.ssl" tofile="${tomcat1.home.dir}/conf/server.xml"/>
  </target>
  
  <target name="ask-to-reconfigure-tomcat-cluster-node2" description="reconfigure Tomcat cluster node 2" if="isTomcat2HomeSet">
    <input message="Do you want to reconfigure tomcat cluster node 2 in order to support SSL? (yes/NO):" defaultvalue="NO" addproperty="answerReconfigureTomcat2"/>
    <condition property="reconfigureTomcat2">
      <equals arg1="yes" arg2="${answerReconfigureTomcat2}"/>
    </condition>
    <antcall target="reconfigure-tomcat-cluster-node2"/>
  </target>
  
  <target name="reconfigure-tomcat-cluster-node2" if="reconfigureTomcat2" description="reconfigures tomcat regarding ssl">
    <antcall target="createCK"/>
    <copy file="${build.dir}/${certificate.keystore}" todir="${tomcat2.home.dir}"/>
    <xslt in="${tomcat2.home.dir}/conf/server.xml"
          out="${tomcat2.home.dir}/conf/server.xml.ssl"
          style="connector.xsl">
      <param name="portNumber" expression="${certificate.port.number}"/>
      <param name="keystoreFile" expression="${certificate.keystore}"/>
      <param name="keystorePass" expression="${certificate.keypass}"/>
      <param name="defaultPort" expression="${servlet.default.port}"/>
    </xslt>
    <tstamp>
      <format property="timestamp" pattern="yyyyMMdd'T'HHmmss"/>
    </tstamp>
    <copy file="${tomcat2.home.dir}/conf/server.xml" tofile="${tomcat2.home.dir}/conf/server.xml.BAK_${timestamp}"/>
    <move file="${tomcat2.home.dir}/conf/server.xml.ssl" tofile="${tomcat2.home.dir}/conf/server.xml"/>
  </target>
  
  <target name="createCK" description="Add ssl configuration to your webserver"> 
    <!-- delete already created file -->
    <delete file="${build.dir}/${certificate.keystore}"/>
    <!-- create new keystore file -->
    <exec executable="keytool">
      <arg line="-genkey"/>
      <arg line="-alias"/>
      <arg value="${servlet.container}"/>
      <arg line="-keyalg"/>
      <arg value="RSA"/>
      <arg line="-storepass"/>
      <arg value="${certificate.keypass}"/>
      <arg line="-keypass"/>
      <arg value="${certificate.keypass}"/>
      <arg line="-keystore"/>
      <arg value="${build.dir}/${certificate.keystore}"/>
      <arg line="-dname"/>
      <arg value="CN=${certificate.common.name}, OU=${certificate.organisation.unit}, O=${certificate.organisation}, L=${certificate.locality.name}, S=${certificate.state.name}, C=${certificate.country.code}"/>
    </exec>
  </target>
  
  <target name="config" description="Initialize all local properties files" depends="init">
  
    <condition property="isTomcat1HomeSet">
      <isset property="tomcat1.home.dir"/>
    </condition>
    <antcall target="ask-to-reconfigure-tomcat-cluster-node1"/>
    
    <condition property="isTomcat2HomeSet">
      <isset property="tomcat2.home.dir"/>
    </condition>
    <antcall target="ask-to-reconfigure-tomcat-cluster-node2"/>
  
    <echo>########################################################################</echo>
    <echo># As a first time user one does NOT have to configure anything, but    #</echo>
    <echo># just run build.sh resp. build.bat and then yanel.sh resp. yanel.bat! #</echo>
    <echo>########################################################################</echo>

    <input message="Do you want to continue the configuration? (yes/NO)" addproperty="answer" defaultvalue="NO"/>

    <condition property="yes.continue">
      <equals arg1="yes" arg2="${answer}"/>
    </condition>
    <antcall target="configure-local"/>
  </target>

  <target name="configure-local" if="yes.continue">
    <echo>Will now create local properties files if these do not exist.</echo>

    <copy file="${yanel.home.dir}/src/build/build.properties" tofile="${yanel.home.dir}/src/build/local.build.properties" overwrite="false"/>

    <copy file="${yanel.home.dir}/conf/yanel.xml" tofile="${yanel.home.dir}/conf/local.yanel.xml" overwrite="false"/>
    <copy file="${yanel.home.dir}/conf/realms.xml" tofile="${yanel.home.dir}/conf/local.realms.xml" overwrite="false"/>
    <copy file="${yanel.home.dir}/conf/yanel-rti-yarep.properties" tofile="${yanel.home.dir}/conf/local.yanel-rti-yarep.properties" overwrite="false"/>
    <copy file="${yanel.home.dir}/conf/yarep.properties" tofile="${yanel.home.dir}/conf/local.yarep.properties" overwrite="false"/>
    <copy file="${yanel.home.dir}/conf/ac-policies-yarep.properties" tofile="${yanel.home.dir}/conf/local.ac-policies-yarep.properties" overwrite="false"/>
    <copy file="${yanel.home.dir}/conf/ac-identities-yarep.properties" tofile="${yanel.home.dir}/conf/local.ac-identities-yarep.properties" overwrite="false"/>

<!--
    <echo>Local property files:</echo>
    <echo>${project.home}/src/build/local.build.properties"</echo>
    <echo>${project.home}/local.yanel.xml"</echo>
    <echo>${project.home}/conf/local.realms.xml"</echo>
    <echo>${project.home}/conf/local.yanel-rti-yarep.properties"</echo>
    <echo>${project.home}/conf/local.yarep.properties"</echo>
    <echo>${project.home}/conf/local.ac-policies-yarep.properties</echo>
    <echo>${project.home}/conf/local.ac-identities-yarep.properties</echo>
-->

    <echo>Customize the local.*.properties files and run build.sh! Or run build.sh first and then customize the *.properties files within build/webapps/yanel/WEB-INF/classes</echo>
  </target>
    
  <target name="init" description="Initialize all parameters and other settings" depends="dependencies">
    <echo>Building with ${ant.version} and Java version ${ant.java.version}</echo>

<!--
    <dirname property="build.src.dir" file="${ant.file}"/>
    <dirname property="src.dir" file="${build.src.dir}"/>
    <dirname property="yanel.home.dir" file="${src.dir}"/>
-->
    <property name="yanel.home.dir" location="../../"/>
<!--
    <echo>Yanel Home Dir: ${yanel.home.dir}</echo>
-->
    <path id="yanel.home.dir.ref">
      <pathelement location="${yanel.home.dir}"/>
    </path>
    <pathconvert targetos="unix" property="yanel.home.dir.forward.slashes" refid="yanel.home.dir.ref">
    </pathconvert>

    <property name="build.dir" location="${yanel.home.dir}/build"/>
    <mkdir dir="${build.dir}"/>
    <property name="classes.dir" location="${build.dir}/classes"/>
    <property name="log4j.path" location="${build.dir}/logs"/>
    <property name="log4j.file" location="${log4j.path}/log4j.log"/>
    <path id="log4j.file.ref">
      <pathelement location="${log4j.file}"/>
    </path>
    <pathconvert targetos="unix" property="log4j.file.forward.slashes" refid="log4j.file.ref">
    </pathconvert>
<!--
    <echo>Log4j file with forward slashes: ${log4j.file.forward.slashes}</echo>
-->


    <path id="classpath">
      <!--
      <fileset dir="${yanel.home.dir}/lib">
        <include name="*.jar"/>
      </fileset>
      -->
      <pathelement path="${maven2.cp}"/>
    </path>


    <path id="classpath.yanel">
      <fileset dir="${yanel.home.dir}/build/lib">
        <include name="*.jar"/>
      </fileset>
      <pathelement path="${maven2.cp}"/>
    </path>


    <path id="classpath.cmdl">
      <pathelement path="${maven2.cp}"/>
    </path>
  </target>

  <target name="init-runtime" description="Initialize all parameters and other settings for runtime" depends="init">
<!--
  <target name="init-runtime" description="Initialize all parameters and other settings for runtime" depends="webapp">
-->

    <path id="classpath.run">
      <!-- Properties files -->
      <pathelement path="${yanel.home.dir}/build/webapps/${servlet.context.prefix}/WEB-INF/classes"/>

      <!-- All from source generated libs -->
      <fileset dir="${yanel.home.dir}/build/webapps/${servlet.context.prefix}/WEB-INF/lib">
        <include name="*.jar"/>
      </fileset>

      <!-- All external dependencies -->
      <!--
      <pathelement path="${maven2.cp}"/>
      -->
    </path>
    <property name="run.cp" refid="classpath.run"/>
<!--
    <echo>Classpath to run yanel: ${run.cp}</echo>
-->
  </target>

  <target name="compile-core" description="Compile Java classes of Yanel core" depends="init">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${yanel.home.dir}/src/core/java/org/wyona/yanel/core" destdir="${classes.dir}" debug="true">
      <classpath refid="classpath"/>
    </javac>
    <mkdir dir="${yanel.home.dir}/build/lib"/>
    <jar destfile="${yanel.home.dir}/build/lib/yanel-core-${yanel.version}-r${yanel.revision}.jar"
      basedir="${classes.dir}"
      includes="org/wyona/yanel/core/**"/>

    <copy file="${yanel.home.dir}/src/build/pom-core.xml" todir="${yanel.home.dir}/build/lib"/>
    <replace file="${yanel.home.dir}/build/lib/pom-core.xml" value="${yanel.version}-r${yanel.revision}">
      <replacetoken>@VERSION@</replacetoken>
    </replace>

    <artifact:pom id="core.project" file="${yanel.home.dir}/build/lib/pom-core.xml"/>

    <artifact:install file="${yanel.home.dir}/build/lib/yanel-core-${yanel.version}-r${yanel.revision}.jar">
      <pom refid="core.project"/>
    </artifact:install>
  </target>

  <target name="compile-impl" description="Compile Java classes of Yanel implementation" depends="init">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${yanel.home.dir}/src/impl/java/org/wyona/yanel/impl" destdir="${classes.dir}" debug="true">
      <classpath refid="classpath"/>
    </javac>

    <mkdir dir="${yanel.home.dir}/build/lib"/>
    <jar destfile="${yanel.home.dir}/build/lib/yanel-impl-${yanel.version}-r${yanel.revision}.jar"
      basedir="${classes.dir}"
      includes="org/wyona/yanel/impl/**"/>
  </target>

  <target name="compile-cmdl" description="Compile Java classes of Yanel command line" depends="init">
    <mkdir dir="${classes.dir}"/>
    <!-- TODO: Make util classes available also for webapp, etc. -->
    <javac srcdir="${yanel.home.dir}/src/core/java/org/wyona/yanel/util" destdir="${classes.dir}" debug="true">
      <classpath refid="classpath"/>
    </javac>
    <javac srcdir="${yanel.home.dir}/src/core/java/org/wyona/yanel/cmdl" destdir="${classes.dir}"
      debug="true"
      classpathref="classpath.cmdl"
    />
    <mkdir dir="${yanel.home.dir}/build/lib"/>
    <jar destfile="${yanel.home.dir}/build/lib/yanel-cmdl-${yanel.version}-r${yanel.revision}.jar"
      basedir="${classes.dir}"
      includes="org/wyona/yanel/cmdl/**,org/wyona/yanel/util/**"/>
  </target>

  <target name="compile-webapp" description="Compile Java classes of Yanel webapp" depends="init, compile-core, compile-cmdl">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${yanel.home.dir}/src/core/java/org/wyona/yanel/servlet" destdir="${classes.dir}"
      debug="true"
      classpathref="classpath"
    />
    <mkdir dir="${yanel.home.dir}/build/lib"/>
    <jar destfile="${yanel.home.dir}/build/lib/yanel-webapp-${yanel.version}-r${yanel.revision}.jar"
      basedir="${classes.dir}"
      includes="org/wyona/yanel/servlet/**"/>
  </target>

  <!-- TODO: Invoice depends on impl ...! -->
  <target name="webapp" description="Build webapp" depends="init, compile-core, compile-impl, build-resources, compile-webapp">
<!--
  <target name="webapp" description="Build webapp" depends="init, compile-webapp">
-->
    <mkdir dir="${build.dir}/webapps/${servlet.context.prefix}"/>
    <copy todir="${build.dir}/webapps/${servlet.context.prefix}">
      <fileset dir="${yanel.home.dir}/src/webapp"/>
    </copy>

    <!-- TODO: Copy onle core, impl, webapp, but NOT cmdl, etc. -->
    <copy todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/lib">
      <fileset dir="${yanel.home.dir}/build/lib"/>
    </copy>

    <antcall target="deploy-resources"/>

<!--
    <copy todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes">
      <fileset dir="${yanel.home.dir}/lib">
        <include name="*.properties"/>
        <exclude name="local.*.properties"/>
      </fileset>
    </copy>
-->
    <copy file="${yanel.home.dir}/conf/CatalogManager.properties" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>
    <copy file="${yanel.home.dir}/conf/catalog.xml" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>
    <copy todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/entities" overwrite="false">
      <fileset dir="${yanel.home.dir}/conf/entities"/>
    </copy>

    <copy file="${yanel.home.dir}/conf/realms.xml" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>
    <copy file="${yanel.home.dir}/conf/log4j.properties" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>
    <copy file="${yanel.home.dir}/conf/yanel-rti-yarep.properties" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>
    <copy file="${yanel.home.dir}/conf/ac-policies-yarep.properties" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>
    <copy file="${yanel.home.dir}/conf/ac-identities-yarep.properties" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>
    <copy file="${yanel.home.dir}/conf/yarep.properties" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>

    <!-- Create yanel.properties -->
    <condition property="local.yanel.config.exists">
      <available file="../../conf/local.yanel.xml" type="file"/>
    </condition>
    <antcall target="generate-yanel-properties"/>


    <!-- Overwrite default by local properties -->
    <!-- TODO: Make the patching selectable within the build.properties of the build ... -->
    <copy file="${yanel.home.dir}/conf/local.yanel-rti-yarep.properties" tofile="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yanel-rti-yarep.properties" overwrite="true" failonerror="false"/>
    <copy file="${yanel.home.dir}/conf/local.yarep.properties" tofile="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yarep.properties" overwrite="true" failonerror="false"/>
    <copy file="${yanel.home.dir}/conf/local.ac-identities-yarep.properties" tofile="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/ac-identities-yarep.properties" overwrite="true" failonerror="false"/>
    <copy file="${yanel.home.dir}/conf/local.ac-policies-yarep.properties" tofile="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/ac-policies-yarep.properties" overwrite="true" failonerror="false"/>
    <copy file="${yanel.home.dir}/conf/local.log4j.properties" tofile="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/log4j.properties" overwrite="true" failonerror="false"/>
    <copy file="${yanel.home.dir}/conf/local.realms.xml" tofile="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/realms.xml" overwrite="true" failonerror="false"/>
    <antcall target="patch-with-local-yanel-config"/>


    <!-- Patch properties ... -->
    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yarep.properties" value="yanel-website,${yanel.home.dir.forward.slashes}/src/realms/yanel-website/config/repository.xml">
      <replacetoken>yanel-website,../src/realms/yanel-website/config/repository.xml</replacetoken>
    </replace>
    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yarep.properties" value="javadoc,${yanel.home.dir.forward.slashes}/src/realms/javadoc/repository.xml">
      <replacetoken>javadoc,../src/realms/javadoc/repository.xml</replacetoken>
    </replace>
    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yarep.properties" value="welcome,${yanel.home.dir.forward.slashes}/src/realms/welcome-admin/yanel/config/data-repository.xml">
      <replacetoken>welcome,../src/realms/welcome-admin/yanel/config/data-repository.xml</replacetoken>
    </replace>

    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yanel.properties" value="${yanel.home.dir.forward.slashes}">
      <replacetoken>..</replacetoken>
    </replace>

    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yanel-rti-yarep.properties" value="yanel-website,${yanel.home.dir.forward.slashes}/src/realms/yanel-website/config/repository.xml">
      <replacetoken>yanel-website,../src/realms/yanel-website/config/repository.xml</replacetoken>
    </replace>
    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/ac-policies-yarep.properties" value="${yanel.home.dir.forward.slashes}/src/realms">
      <replacetoken>../src/realms</replacetoken>
    </replace>
    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/ac-identities-yarep.properties" value="yanel-website,${yanel.home.dir.forward.slashes}/src/realms/yanel-website/config/">
      <replacetoken>yanel-website,../src/realms/yanel-website/config/</replacetoken>
    </replace>

    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yanel-rti-yarep.properties" value="javadoc,${yanel.home.dir.forward.slashes}/src/realms/javadoc/yanel-rti-repository.xml">
      <replacetoken>javadoc,../src/realms/javadoc/yanel-rti-repository.xml</replacetoken>
    </replace>
    <!-- NOTE: No exception shall be thrown even if one does not build the javadocs -->
    <mkdir dir="${build.dir}/javadoc"/>

    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yanel-rti-yarep.properties" value="welcome,${yanel.home.dir.forward.slashes}/src/realms/welcome-admin/yanel/config/rti-repository.xml">
      <replacetoken>welcome,../src/realms/welcome-admin/yanel/config/rti-repository.xml</replacetoken>
    </replace>

    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/log4j.properties" value="${log4j.file.forward.slashes}">
      <replacetoken>@LOG4J_FILE@</replacetoken>
    </replace>
    <mkdir dir="${log4j.path}"/>
    <touch file="${log4j.file}"/>

    <copy todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/lib">
      <fileset refid="maven2.fileset"/>
      <mapper type="flatten"/>
    </copy>

    <ant antfile="${yanel.home.dir}/build/resources.xml" target="copy-resources-dependencies"/>
  </target>

  <target name="war" description="Build war file" depends="init, webapp">
    <jar jarfile="${yanel.home.dir}/build/webapps/${servlet.context.prefix}.war" basedir="${yanel.home.dir}/build/webapps/${servlet.context.prefix}"/>
  </target>

  <target name="deploy" description="Deploy war file" depends="init, war">
    <condition property="property-tomcat-cluster-node1-is-set">
      <isset property="tomcat1.home.dir"/>
    </condition>
    <antcall target="deploy-to-tomcat-cluster-node1"/>

    <condition property="property-tomcat-cluster-node2-is-set">
      <isset property="tomcat2.home.dir"/>
    </condition>
    <antcall target="deploy-to-tomcat-cluster-node2"/>

    <antcall target="final-message"/>
  </target>

  <target name="final-message">
    <echo>INFO: Build has been completed successfully :-)</echo>
    <echo></echo>
    <echo>INFO: Start using Yanel by executing "yanel.sh start" resp. "yanel.sh /hello/world.html"</echo>
  </target>
  
  <target name="setServerProperties" description="setting server properties">
    <copy file="server.properties"  todir="${build.dir}" />
    <replace file="${build.dir}/server.properties" value="${servlet.default.port}">
      <replacetoken>@@PORT_NO@@</replacetoken>
    </replace>
    <replace file="${build.dir}/server.properties" value="${certificate.port.number}">
      <replacetoken>@@SSL_PORT@@</replacetoken>
    </replace>
  </target>

  <target name="deploy-to-tomcat-cluster-node1" if="property-tomcat-cluster-node1-is-set" description="Deploy webapp to Tomcat cluster node 1">
    <echo>Copy webapp (${tomcat1.webapps.dir}):</echo>

    <fail message="No such directory: ${tomcat1.webapps.dir}">
      <condition><not><available file="${tomcat1.webapps.dir}"/></not></condition>
    </fail>

    <copy todir="${tomcat1.webapps.dir}/${servlet.context.prefix}">
      <fileset dir="${yanel.home.dir}/build/webapps/${servlet.context.prefix}"/>
    </copy>

    <condition property="ask-to-copy-endorsed-xerces-to-node1">
      <not>
        <available file="${tomcat1.home.dir}/common/endorsed/${xerces.impl.artifactId}-${xerces.impl.version}.jar"/>
      </not>
    </condition>
    <antcall target="ask-to-copy-endorsed-xerces-to-node1"/>
    
    <condition property="ask-to-copy-endorsed-xml-apis-to-node1">
      <not>
        <available file="${tomcat1.home.dir}/common/endorsed/${xml.apis.artifactId}-${xml.apis.version}.jar"/>
      </not>
    </condition>
    <antcall target="ask-to-copy-endorsed-xml-apis-to-node1"/>
    
    <antcall target="setServerProperties"/>
    <copy file="${build.dir}/server.properties"  todir="${tomcat1.webapps.dir}/${servlet.context.prefix}/WEB-INF/classes/" />
  </target>

  <target name="deploy-to-tomcat-cluster-node2" if="property-tomcat-cluster-node2-is-set" description="Deploy webapp to Tomcat cluster node 2">
    <echo>Copy webapp (${tomcat2.webapps.dir}):</echo>

    <fail message="No such directory: ${tomcat2.webapps.dir}">
      <condition><not><available file="${tomcat2.webapps.dir}"/></not></condition>
    </fail>

    <copy todir="${tomcat2.webapps.dir}/${servlet.context.prefix}">
      <fileset dir="${yanel.home.dir}/build/webapps/${servlet.context.prefix}"/>
    </copy>

    <condition property="ask-to-copy-endorsed-xerces-node2">
      <not>
        <available file="${tomcat2.home.dir}/common/endorsed/${xerces.impl.artifactId}-${xerces.impl.version}.jar"/>
      </not>
    </condition>
    <antcall target="ask-to-copy-endorsed-xerces-node2"/>
    
    <condition property="ask-to-copy-endorsed-xml-apis-node2">
      <not>
        <available file="${tomcat2.home.dir}/common/endorsed/${xml.apis.artifactId}-${xml.apis.version}.jar"/>
      </not>
    </condition>
    <antcall target="ask-to-copy-endorsed-xml-apis-node2"/>
    
    <antcall target="setServerProperties"/>
    <copy file="${build.dir}/server.properties"  todir="${tomcat2.webapps.dir}/${servlet.context.prefix}/WEB-INF/classes/" />
  </target>

  <target name="ask-to-copy-endorsed-xerces-to-node1" if="ask-to-copy-endorsed-xerces-to-node1">
    <input message="Endorsed lib is missing (${tomcat1.home.dir}/common/endorsed/${xerces.impl.artifactId}-${xerces.impl.version}.jar). Do you want it to be added? (yes/NO):" addproperty="answer"/>
    <condition property="yes-do-copy-endorsed-xerces-to-node1">
      <equals arg1="yes" arg2="${answer}"/>
    </condition>
    <antcall target="do-copy-endorsed-xerces-to-node1"/>
  </target>

  <target name="ask-to-copy-endorsed-xml-apis-to-node1" if="ask-to-copy-endorsed-xml-apis-to-node1">
    <input message="Endorsed lib is missing (${tomcat1.home.dir}/common/endorsed/${xml.apis.artifactId}-${xml.apis.version}.jar). Do you want it to be added? (yes/NO):" addproperty="answer"/>
    <condition property="yes-do-copy-endorsed-xml-apis-to-node1">
      <equals arg1="yes" arg2="${answer}"/>
    </condition>
    <antcall target="do-copy-endorsed-xml-apis-to-node1"/>
  </target>
  
  <target name="do-copy-endorsed-xerces-to-node1" if="yes-do-copy-endorsed-xerces-to-node1">
    <copy file="${yanel.home.dir}/build/webapps/${servlet.context.prefix}/WEB-INF/lib/${xerces.impl.artifactId}-${xerces.impl.version}.jar" todir="${tomcat1.home.dir}/common/endorsed" overwrite="false"/>
  </target>
  
  <target name="do-copy-endorsed-xml-apis-to-node1" if="yes-do-copy-endorsed-xml-apis-to-node1">
    <copy file="${yanel.home.dir}/build/webapps/${servlet.context.prefix}/WEB-INF/lib/${xml.apis.artifactId}-${xml.apis.version}.jar" todir="${tomcat1.home.dir}/common/endorsed" overwrite="false"/>
  </target>

  <target name="ask-to-copy-endorsed-xerces-node2" if="ask-to-copy-endorsed-xerces-node2">
    <input message="Endorsed lib is missing (${tomcat2.home.dir}/common/endorsed/${xerces.impl.artifactId}-${xerces.impl.version}.jar). Do you want it to be added? (yes/NO):" addproperty="answer"/>
    <condition property="yes-do-copy-endorsed-xerces-node2">
      <equals arg1="yes" arg2="${answer}"/>
    </condition>
    <antcall target="do-copy-endorsed-xerces-node2"/>
  </target>
  
  <target name="do-copy-endorsed-xerces-node2" if="yes-do-copy-endorsed-xerces-node2">
    <copy file="${yanel.home.dir}/build/webapps/${servlet.context.prefix}/WEB-INF/lib/${xerces.impl.artifactId}-${xerces.impl.version}.jar" todir="${tomcat2.home.dir}/common/endorsed" overwrite="false"/>
  </target>

  <target name="ask-to-copy-endorsed-xml-apis-node2" if="ask-to-copy-endorsed-xml-apis-node2">
    <input message="Endorsed lib is missing (${tomcat2.home.dir}/common/endorsed/${xml.apis.artifactId}-${xml.apis.version}.jar). Do you want it to be added? (yes/NO):" addproperty="answer"/>
    <condition property="yes-do-copy-endorsed-xml-apis-node2">
      <equals arg1="yes" arg2="${answer}"/>
    </condition>
    <antcall target="do-copy-endorsed-xml-apis-node2"/>
  </target>
  
  <target name="do-copy-endorsed-xml-apis-node2" if="yes-do-copy-endorsed-xml-apis-node2">
    <copy file="${yanel.home.dir}/build/webapps/${servlet.context.prefix}/WEB-INF/lib/${xml.apis.artifactId}-${xml.apis.version}.jar" todir="${tomcat2.home.dir}/common/endorsed" overwrite="false"/>
  </target>

  <target name="clean" description="Clean build" depends="init, clean-resources">
    <delete dir="${build.dir}"/>
<!--
    <antcall target="clean-resources"/>
-->

    <condition property="yes-delete-tomcat-cluster-node1">
      <and>
        <isset property="tomcat1.home.dir"/>
        <available file="${tomcat1.webapps.dir}/${servlet.context.prefix}" type="dir"/>
        <istrue value="${force-clean}"/>
      </and>
    </condition>
    <antcall target="do-clean-tomcat-cluster-node1"/>

    <condition property="property-tomcat-cluster-node1-is-set">
      <and>
        <isset property="tomcat1.home.dir"/>
        <available file="${tomcat1.webapps.dir}/${servlet.context.prefix}" type="dir"/>
      </and>
    </condition>
    <antcall target="ask-to-clean-tomcat-cluster-node1"/>


    <condition property="yes-delete-tomcat-cluster-node2">
      <and>
        <isset property="tomcat1.home.dir"/>
        <available file="${tomcat1.webapps.dir}/${servlet.context.prefix}" type="dir"/>
        <istrue value="${force-clean}"/>
      </and>
    </condition>
    <antcall target="do-clean-tomcat-cluster-node2"/>
    
    <condition property="property-tomcat-cluster-node2-is-set">
      <and>
        <isset property="tomcat2.home.dir"/>
        <available file="${tomcat2.webapps.dir}/${servlet.context.prefix}" type="dir"/>
      </and>
    </condition>
    <antcall target="ask-to-clean-tomcat-cluster-node2"/>
  </target>

  <target name="ask-to-clean-tomcat-cluster-node1" if="property-tomcat-cluster-node1-is-set" description="Clean Tomcat cluster node 1">
    <input message="Do you really want to delete your deployed (maybe productive) Yanel version at '${tomcat1.webapps.dir}/${servlet.context.prefix}'? (yes/NO):" addproperty="answer"/>
    <condition property="yes-delete-tomcat-cluster-node1">
      <equals arg1="yes" arg2="${answer}"/>
    </condition>
    <antcall target="do-clean-tomcat-cluster-node1"/>
  </target>

  <target name="do-clean-tomcat-cluster-node1" if="yes-delete-tomcat-cluster-node1" description="Clean Tomcat cluster node 1">
    <echo>Clean Tomcat cluster node 1:</echo>

    <fail message="No such directory: ${tomcat1.webapps.dir}">
      <condition><not><available file="${tomcat1.webapps.dir}"/></not></condition>
    </fail>

    <delete dir="${tomcat1.webapps.dir}/${servlet.context.prefix}"/>
    <delete dir="${tomcat1.work.dir}/${servlet.context.prefix}"/>
  </target>

  <target name="ask-to-clean-tomcat-cluster-node2" if="property-tomcat-cluster-node2-is-set" description="Clean Tomcat cluster node 2">
    <input message="Do you really want to delete your deployed (maybe productive) Yanel version at '${tomcat2.webapps.dir}/${servlet.context.prefix}'? (yes/NO):" addproperty="answer"/>
    <condition property="yes-delete-tomcat-cluster-node2">
      <equals arg1="yes" arg2="${answer}"/>
    </condition>
    <antcall target="do-clean-tomcat-cluster-node2"/>
  </target>

  <target name="do-clean-tomcat-cluster-node2" if="yes-delete-tomcat-cluster-node2" description="Clean Tomcat cluster node 2">
    <echo>Clean Tomcat cluster node 2:</echo>

    <fail message="No such directory: ${tomcat2.webapps.dir}">
      <condition><not><available file="${tomcat2.webapps.dir}"/></not></condition>
    </fail>

    <delete dir="${tomcat2.webapps.dir}/${servlet.context.prefix}"/>
    <delete dir="${tomcat2.work.dir}/${servlet.context.prefix}"/>
  </target>

  <target name="javadoc" description="Generate Javadoc" depends="init">
    <javadoc
      packagenames="org.*"
      sourcepath="${yanel.home.dir}/src/core/java"
      destdir="${yanel.home.dir}/build/javadoc"
      classpathref="classpath.run"
    >
    </javadoc>
  </target>

  <target name="run-yanel-cmdl" description="Run command line tool" depends="init-runtime">
    <echo>Yanel Path: ${yanel.path}</echo>
    <!--
    <exec executable="java">
      <arg line="-classpath ${run.cp} org.wyona.yanel.cmdl.YanelCommandLine"/>
    </exec>
    -->
    <java classname="org.wyona.yanel.cmdl.YanelCommandLine">
      <classpath refid="classpath.run"/>
      <arg value="${yanel.path}"/>
      <!-- On Linux, Java 1.4.2 needs this sysproperty whereas on Mac OS X it doesn't seem to be necessary -->
      <sysproperty key="org.xml.sax.driver" value="org.apache.xerces.parsers.SAXParser"/>
    </java>
  </target>

  <target name="generate-resources-build" description="Generate resources build" depends="init">
    <condition property="local.yanel.config.exists">
      <available file="../../conf/local.yanel.xml" type="file"/>
    </condition>
    <antcall target="generate-resources-build-from-default"/>
    <antcall target="generate-resources-build-from-local"/>
  </target>

  <target name="generate-resources-build-from-default" description="Generate resources build from default config" depends="init" unless="local.yanel.config.exists">
    <xslt in="../../conf/yanel.xml" out="../../build/resources.xml" style="yanel2resources.xsl" force="false">
      <param name="servlet.context.prefix" expression="${servlet.context.prefix}"/>
      <param name="yanel.source.version" expression="${yanel.version}-r${yanel.revision}"/>
    </xslt>
  </target>

  <target name="generate-resources-build-from-local" description="Generate resources build from local config" depends="init" if="local.yanel.config.exists">
    <xslt in="../../conf/local.yanel.xml" out="../../build/resources.xml" style="yanel2resources.xsl" force="true">
      <param name="servlet.context.prefix" expression="${servlet.context.prefix}"/>
      <param name="yanel.source.version" expression="${yanel.version}-r${yanel.revision}"/>
    </xslt>
  </target>

  <target name="build-resources" description="Build resources" depends="generate-resources-build">
    <ant antfile="${yanel.home.dir}/build/resources.xml" target="build-resources"/>
  </target>

  <target name="deploy-resources" description="Deploy resources" depends="generate-resources-build">
    <ant antfile="${yanel.home.dir}/build/resources.xml" target="deploy-resources"/>
  </target>

  <target name="clean-resources" description="Clean resources" depends="generate-resources-build">
    <ant antfile="${yanel.home.dir}/build/resources.xml" target="clean-resources"/>
  </target>

  <target name="generate-yanel-properties" unless="local.yanel.config.exists">
    <xslt in="../../conf/yanel.xml" out="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yanel.properties" style="yanel2properties.xsl" force="false">
      <param name="servlet.context.prefix" expression="${servlet.context.prefix}"/>
    </xslt>
  </target>

  <target name="patch-with-local-yanel-config" if="local.yanel.config.exists">
    <xslt in="../../conf/local.yanel.xml" out="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yanel.properties" style="yanel2properties.xsl" force="true">
      <param name="servlet.context.prefix" expression="${servlet.context.prefix}"/>
    </xslt>
  </target>

</project>
