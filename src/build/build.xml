<?xml version="1.0"?>

<project name="yanel" default="deploy" xmlns:artifact="antlib:org.apache.maven.artifact.ant">

  <target name="init" description="Initialize all parameters and other settings">
    <echo>Building with ${ant.version} and Java version ${ant.java.version}</echo>

    <property file="local.build.properties"/>
    <property file="build.properties"/>

    <dirname property="build.src.dir" file="${ant.file}"/>
    <dirname property="src.dir" file="${build.src.dir}"/>
    <dirname property="yanel.home.dir" file="${src.dir}"/>

    <property name="build.dir" value="${yanel.home.dir}/build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="log4j.path" value="${build.dir}/logs"/>

    <!-- INFO: http://maven.apache.org/ant-tasks.html -->
    <artifact:remoteRepository id="wyona.remote.repository" url="http://www.wyona.org/maven2/"/>

    <artifact:dependencies pathId="maven2.classpath" filesetId="maven2.fileset">
      <remoteRepository refid="wyona.remote.repository"/>
      <dependency groupId="javax.servlet" artifactId="servlet-api" 
                  version="2.3" scope="provided" />
      <dependency groupId="log4j" artifactId="log4j"
                  version="1.2.8"/>
      <!-- TODO: Add checksum file to server -->
      <dependency groupId="yarep" artifactId="yarep"
                  version="0.0.1-dev-r15817"/>
      <dependency groupId="wyona-org-commons" artifactId="wyona-org-commons"
                  version="0.0.1-dev-r15048"/>
      <dependency groupId="wyona-org-security" artifactId="wyona-org-security-core"
                  version="0.0.1-dev-r15584"/>

      <!-- TODO: Add to yanel.xml, because these libs are only needed during runtime -->
      <dependency groupId="avalon-framework" artifactId="avalon-framework-api"
                  version="4.1.5"/>
      <dependency groupId="avalon-framework" artifactId="avalon-framework-impl"
                  version="4.1.5"/>
      <dependency groupId="apache-jakarta-commons" artifactId="apache-jakarta-commons-discovery"
                  version="0.2"/>
      <dependency groupId="apache-jakarta-commons" artifactId="apache-jakarta-commons-id"
                  version="0.1-dev-lcr357257"/>
      <dependency groupId="apache-jakarta-commons" artifactId="apache-jakarta-commons-logging"
                  version="1.0.4"/>
      <!-- IMPORT: xerces 2.7.1 is dependent on xml-apis 1.3.02 -->
      <dependency groupId="xerces" artifactId="xercesImpl"
                  version="2.7.1"/>
      <dependency groupId="xml-apis" artifactId="xml-apis"
                  version="1.3.02"/>
      <dependency groupId="xml-resolver" artifactId="xml-resolver"
                  version="1.1"/>
      <dependency groupId="wyona-org-security" artifactId="wyona-org-security-impl"
                  version="0.0.1-dev-r15775"/>
    </artifact:dependencies>

    <!--
    <property name="maven.repo.local" value="${user.home}/.m2/repository"/>
    -->
    <property name="maven2.cp" refid="maven2.classpath"/>
    <!--<echo>Maven2 classpath: ${maven2.cp}</echo>-->
    <path id="classpath">
      <!--
      <fileset dir="${yanel.home.dir}/lib">
        <include name="*.jar"/>
      </fileset>
       -->

      <pathelement path="${maven2.cp}"/>
    </path>

    <path id="classpath.yanel">
      <fileset dir="${yanel.home.dir}/build/lib">
        <include name="*.jar"/>
      </fileset>
      <pathelement path="${maven2.cp}"/>
    </path>

    <path id="classpath.resources">
      <fileset dir="${yanel.home.dir}/src/resources/tape/build/lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${yanel.home.dir}/src/resources/invoice/build/lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${yanel.home.dir}/src/resources/websearch/build/lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${yanel.home.dir}/src/resources/odt/build/lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${yanel.home.dir}/src/resources/xml/build/lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${yanel.home.dir}/src/resources/file/build/lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${yanel.home.dir}/src/resources/directory/build/lib">
        <include name="*.jar"/>
      </fileset>
      <pathelement path="${maven2.cp}"/>
    </path>
  </target>

  <target name="init-runtime" description="Initialize all parameters and other settings for runtime" depends="init">
<!--
  <target name="init-runtime" description="Initialize all parameters and other settings for runtime" depends="webapp">
-->
    <path id="classpath.run">
      <pathelement path="${yanel.home.dir}/build/classes"/>
<!--
      <fileset dir="${yanel.home.dir}/build/lib">
        <include name="*.jar"/>
      </fileset>
-->
      <!-- Properties files -->
      <pathelement path="${yanel.home.dir}/build/webapps/${servlet.context.prefix}/WEB-INF/classes"/>
      <fileset dir="${yanel.home.dir}/src/resources/tape/build/lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${yanel.home.dir}/src/resources/invoice/build/lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${yanel.home.dir}/src/resources/websearch/build/lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${yanel.home.dir}/src/resources/odt/build/lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${yanel.home.dir}/src/resources/xml/build/lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${yanel.home.dir}/src/resources/file/build/lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${yanel.home.dir}/src/resources/directory/build/lib">
        <include name="*.jar"/>
      </fileset>
      <pathelement path="${maven2.cp}"/>
    </path>
    <property name="run.cp" refid="classpath.run"/>
<!--
    <echo>Classpath to run yanel: ${run.cp}</echo>
-->
  </target>

  <target name="compile-core" description="Compile Java classes of Yanel core" depends="init">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${yanel.home.dir}/src/core/java/org/wyona/yanel/core" destdir="${classes.dir}" debug="true">
      <classpath refid="classpath"/>
    </javac>
    <mkdir dir="${yanel.home.dir}/build/lib"/>
    <jar destfile="${yanel.home.dir}/build/lib/yanel-core-0.0.1-dev-r${yanel.revision}.jar"
      basedir="${classes.dir}"
      includes="org/wyona/yanel/core/**"/>
  </target>

  <target name="compile-impl" description="Compile Java classes of Yanel implementation" depends="init">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${yanel.home.dir}/src/impl/java/org/wyona/yanel/impl" destdir="${classes.dir}" debug="true">
      <classpath refid="classpath"/>
    </javac>

    <mkdir dir="${yanel.home.dir}/build/lib"/>
    <jar destfile="${yanel.home.dir}/build/lib/yanel-impl-0.0.1-dev-r${yanel.revision}.jar"
      basedir="${classes.dir}"
      includes="org/wyona/yanel/impl/**"/>
  </target>

  <!-- Generic compile target for a specific resource -->
  <target name="compile-resource" description="Compile Java classes of a specified resource" depends="init, compile-core">
    <property name="resource.home.dir" value="${yanel.home.dir}/src/resources/NULL"/>
    <property name="resource.name" value="NULL"/>

    <property name="resource.classes.dir" value="${resource.home.dir}/build/classes"/>
    <property name="resource.lib.dir" value="${resource.home.dir}/build/lib"/>
    <property name="resource.java.dir" value="${resource.home.dir}/src/java"/>

    <mkdir dir="${resource.classes.dir}"/>
    <javac srcdir="${resource.java.dir}" destdir="${resource.classes.dir}"
      classpathref="classpath.yanel"
      debug="true"
    />
    <mkdir dir="${resource.lib.dir}"/>
    <jar destfile="${resource.lib.dir}/yanel-resource-${resource.name}-0.0.1-dev-r${yanel.revision}.jar"
      basedir="${resource.classes.dir}"
    />
  </target>

  <target name="compile-tape-resource" description="Compile Java classes of Tape resource" depends="init">
    <property name="tape-resource.classes.dir" value="${yanel.home.dir}/src/resources/tape/build/classes"/>
    <mkdir dir="${tape-resource.classes.dir}"/>
    <javac srcdir="${yanel.home.dir}/src/resources/tape/src/java" destdir="${tape-resource.classes.dir}"
      classpathref="classpath.yanel"
      debug="true"
    />
    <mkdir dir="${yanel.home.dir}/src/resources/tape/build/lib"/>
    <jar destfile="${yanel.home.dir}/src/resources/tape/build/lib/yanel-resource-tape-0.0.1-dev-r${yanel.revision}.jar"
      basedir="${tape-resource.classes.dir}"
    />
  </target>
  <target name="compile-invoice-resource" description="Compile Java classes of Invoice resource" depends="init">
    <property name="invoice-resource.classes.dir" value="${yanel.home.dir}/src/resources/invoice/build/classes"/>
    <mkdir dir="${invoice-resource.classes.dir}"/>
    <javac srcdir="${yanel.home.dir}/src/resources/invoice/src/java" destdir="${invoice-resource.classes.dir}"
      classpathref="classpath.yanel"
      debug="true"
    />
    <mkdir dir="${yanel.home.dir}/src/resources/invoice/build/lib"/>
    <jar destfile="${yanel.home.dir}/src/resources/invoice/build/lib/yanel-resource-invoice-0.0.1-dev-r${yanel.revision}.jar"
      basedir="${invoice-resource.classes.dir}"
    />
  </target>
  <target name="compile-websearch-resource" description="Compile Java classes of WebSearch resource" depends="init">
    <property name="websearch-resource.classes.dir" value="${yanel.home.dir}/src/resources/websearch/build/classes"/>
    <mkdir dir="${websearch-resource.classes.dir}"/>
    <javac srcdir="${yanel.home.dir}/src/resources/websearch/src/java" destdir="${websearch-resource.classes.dir}"
      classpathref="classpath.yanel"
      debug="true"
    />
    <mkdir dir="${yanel.home.dir}/src/resources/websearch/build/lib"/>
    <jar destfile="${yanel.home.dir}/src/resources/websearch/build/lib/yanel-resource-websearch-0.0.1-dev-r${yanel.revision}.jar"
      basedir="${websearch-resource.classes.dir}"
    />
  </target>

  <target name="compile-file-resource" description="Compile Java classes of File resource" depends="init">
    <antcall target="compile-resource">
      <param name="resource.home.dir" value="${yanel.home.dir}/src/resources/file"/>
      <param name="resource.name" value="file"/>
    </antcall>
  </target>

  <target name="compile-directory-resource" description="Compile Java classes of Directory resource" depends="init">
    <property name="directory-resource.classes.dir" value="${yanel.home.dir}/src/resources/directory/build/classes"/>
    <mkdir dir="${directory-resource.classes.dir}"/>
    <javac srcdir="${yanel.home.dir}/src/resources/directory/src/java" destdir="${directory-resource.classes.dir}"
      classpathref="classpath.yanel"
      debug="true"
    />
    <mkdir dir="${yanel.home.dir}/src/resources/directory/build/lib"/>
    <jar destfile="${yanel.home.dir}/src/resources/directory/build/lib/yanel-resource-directory-0.0.1-dev-r${yanel.revision}.jar"
      basedir="${directory-resource.classes.dir}"
    />
  </target>
  <target name="compile-odt-resource" description="Compile Java classes of ODT resource" depends="init">
    <property name="odt-resource.classes.dir" value="${yanel.home.dir}/src/resources/odt/build/classes"/>
    <mkdir dir="${odt-resource.classes.dir}"/>
    <javac srcdir="${yanel.home.dir}/src/resources/odt/src/java" destdir="${odt-resource.classes.dir}"
      classpathref="classpath.yanel"
      debug="true"
    />
    <mkdir dir="${yanel.home.dir}/src/resources/odt/build/lib"/>
    <jar destfile="${yanel.home.dir}/src/resources/odt/build/lib/yanel-resource-odt-0.0.1-dev-r${yanel.revision}.jar"
      basedir="${odt-resource.classes.dir}"
    />
  </target>
  <target name="compile-xml-resource" description="Compile Java classes of XML resource" depends="init">
    <property name="xml-resource.classes.dir" value="${yanel.home.dir}/src/resources/xml/build/classes"/>
    <mkdir dir="${xml-resource.classes.dir}"/>
    <javac srcdir="${yanel.home.dir}/src/resources/xml/src/java" destdir="${xml-resource.classes.dir}"
      classpathref="classpath.yanel"
      debug="true"
    />
    <mkdir dir="${yanel.home.dir}/src/resources/xml/build/lib"/>
    <jar destfile="${yanel.home.dir}/src/resources/xml/build/lib/yanel-resource-xml-0.0.1-dev-r${yanel.revision}.jar"
      basedir="${xml-resource.classes.dir}"
    />
  </target>

  <target name="compile-cmdl" description="Compile Java classes of Yanel command line" depends="init">
    <mkdir dir="${classes.dir}"/>
    <!-- TODO: Make util classes available also for webapp, etc. -->
    <javac srcdir="${yanel.home.dir}/src/core/java/org/wyona/yanel/util" destdir="${classes.dir}" debug="true">
      <classpath refid="classpath"/>
    </javac>
    <javac srcdir="${yanel.home.dir}/src/core/java/org/wyona/yanel/cmdl" destdir="${classes.dir}"
      debug="true"
      classpathref="classpath.resources"
    />
    <mkdir dir="${yanel.home.dir}/build/lib"/>
    <jar destfile="${yanel.home.dir}/build/lib/yanel-cmdl-0.0.1-dev-r${yanel.revision}.jar"
      basedir="${classes.dir}"
      includes="org/wyona/yanel/cmdl/**,org/wyona/yanel/util/**"/>
  </target>

  <target name="compile-webapp" description="Compile Java classes of Yanel webapp" depends="init, compile-core, compile-cmdl">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${yanel.home.dir}/src/core/java/org/wyona/yanel/servlet" destdir="${classes.dir}"
      debug="true"
      classpathref="classpath"
    />
    <mkdir dir="${yanel.home.dir}/build/lib"/>
    <jar destfile="${yanel.home.dir}/build/lib/yanel-webapp-0.0.1-dev-r${yanel.revision}.jar"
      basedir="${classes.dir}"
      includes="org/wyona/yanel/servlet/**"/>
  </target>

  <target name="webapp" description="Build webapp" depends="init, compile-core, compile-websearch-resource, compile-odt-resource, compile-xml-resource, compile-file-resource, compile-directory-resource, compile-impl, compile-invoice-resource, compile-tape-resource, compile-webapp">
<!--
  <target name="webapp" description="Build webapp" depends="init, compile-webapp">
-->
    <mkdir dir="${build.dir}/webapps/${servlet.context.prefix}"/>
    <copy todir="${build.dir}/webapps/${servlet.context.prefix}">
      <fileset dir="${yanel.home.dir}/src/webapp"/>
    </copy>

    <!-- TODO: Copy onle core, impl, webapp, but NOT cmdl, etc. -->
    <copy todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/lib">
      <fileset dir="${yanel.home.dir}/build/lib"/>
    </copy>
    <!--
    <copy todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes">
      <fileset dir="${yanel.home.dir}/build/classes"/>
    </copy>
    -->

    <!-- TODO: Copy these libs dynamically -->
    <copy todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/lib">
      <fileset dir="${yanel.home.dir}/src/resources/file/build/lib"/>
      <fileset dir="${yanel.home.dir}/src/resources/directory/build/lib"/>
      <fileset dir="${yanel.home.dir}/src/resources/websearch/build/lib"/>
      <fileset dir="${yanel.home.dir}/src/resources/odt/build/lib"/>
      <fileset dir="${yanel.home.dir}/src/resources/xml/build/lib"/>
<!--
      <fileset dir="${yanel.home.dir}/src/resources/calendar/build/lib"/>
-->
      <fileset dir="${yanel.home.dir}/src/resources/tape/build/lib"/>
    </copy>


<!--
    <copy todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes">
      <fileset dir="${yanel.home.dir}/lib">
        <include name="*.properties"/>
        <exclude name="local.*.properties"/>
      </fileset>
    </copy>
-->
    <copy file="${yanel.home.dir}/lib/CatalogManager.properties" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>

    <copy file="${yanel.home.dir}/lib/log4j.properties" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>
    <copy file="${yanel.home.dir}/lib/local.log4j.properties" tofile="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/log4j.properties" overwrite="true" failonerror="false"/>

    <copy file="${yanel.home.dir}/lib/yanel-rti-yarep.properties" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>
    <copy file="${yanel.home.dir}/lib/local.yanel-rti-yarep.properties" tofile="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yanel-rti-yarep.properties" overwrite="true" failonerror="false"/>

    <copy file="${yanel.home.dir}/lib/ac-policies-yarep.properties" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>
    <copy file="${yanel.home.dir}/lib/local.ac-policies-yarep.properties" tofile="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/ac-policies-yarep.properties" overwrite="true" failonerror="false"/>

    <copy file="${yanel.home.dir}/lib/ac-identities-yarep.properties" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>
    <copy file="${yanel.home.dir}/lib/local.ac-identities-yarep.properties" tofile="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/ac-identities-yarep.properties" overwrite="true" failonerror="false"/>

    <copy file="${yanel.home.dir}/lib/yarep.properties" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>
    <copy file="${yanel.home.dir}/lib/local.yarep.properties" tofile="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yarep.properties" overwrite="true" failonerror="false"/>
    <copy file="${yanel.home.dir}/lib/yanel.properties" todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes" overwrite="false"/>
    <copy file="${yanel.home.dir}/lib/local.yanel.properties" tofile="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yanel.properties" overwrite="true" failonerror="false"/>

    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yanel-rti-yarep.properties" value="yanel-sample,${yanel.home.dir}/src/sample-repository/config/repository.xml">
      <replacetoken>yanel-sample,../src/sample-repository/config/repository.xml</replacetoken>
    </replace>
    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/ac-policies-yarep.properties" value="security-sample,${yanel.home.dir}/src/sample-repository/config/repository.xml">
      <replacetoken>security-sample,../src/sample-repository/config/repository.xml</replacetoken>
    </replace>
    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/ac-identities-yarep.properties" value="yanel-sample,${yanel.home.dir}/src/sample-repository/config/repository.xml">
      <replacetoken>yanel-sample,../src/sample-repository/config/repository.xml</replacetoken>
    </replace>

    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yanel-rti-yarep.properties" value="javadoc,${yanel.home.dir}/src/javadoc-repository/yanel-rti-repository.xml">
      <replacetoken>javadoc,../src/javadoc-repository/yanel-rti-repository.xml</replacetoken>
    </replace>
    <!-- NOTE: No exception shall be thrown even if one does not build the javadocs -->
    <mkdir dir="${build.dir}/javadoc"/>

    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yarep.properties" value="yanel-sample,${yanel.home.dir}/src/sample-repository/config/repository.xml">
      <replacetoken>yanel-sample,../src/sample-repository/config/repository.xml</replacetoken>
    </replace>
    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yarep.properties" value="javadoc,${yanel.home.dir}/src/javadoc-repository/repository.xml">
      <replacetoken>javadoc,../src/javadoc-repository/repository.xml</replacetoken>
    </replace>
    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/yanel.properties" value="${yanel.home.dir}">
      <replacetoken>../../../../..</replacetoken>
    </replace>
    <replace file="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/classes/log4j.properties" value="${log4j.path}">
      <replacetoken>@LOG4J_PATH@</replacetoken>
    </replace>
    <mkdir dir="${log4j.path}"/>

    <copy todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/lib">
      <fileset refid="maven2.fileset"/>
      <mapper type="flatten"/>
    </copy>
  </target>

  <target name="war" description="Build war file" depends="init, webapp">
    <jar jarfile="${yanel.home.dir}/build/webapps/${servlet.context.prefix}.war" basedir="${yanel.home.dir}/build/webapps/${servlet.context.prefix}"/>
  </target>

  <target name="deploy" description="Deploy war file" depends="init, war">
    <condition property="property-tomcat-cluster-node1-is-set">
      <isset property="tomcat1.home.dir"/>
    </condition>
    <antcall target="deploy-to-tomcat-cluster-node1"/>

    <condition property="property-tomcat-cluster-node2-is-set">
      <isset property="tomcat2.home.dir"/>
    </condition>
    <antcall target="deploy-to-tomcat-cluster-node2"/>

    <antcall target="final-message"/>
  </target>

  <target name="final-message">
    <echo>INFO: Build has been completed successfully :-)</echo>
    <echo></echo>
    <echo>INFO: Start using Yanel by executing yanel.sh</echo>
  </target>

  <target name="deploy-to-tomcat-cluster-node1" if="property-tomcat-cluster-node1-is-set" description="Deploy webapp to Tomcat cluster node 1">
    <echo>Copy webapp (${tomcat1.webapps.dir}):</echo>

    <fail message="No such directory: ${tomcat1.webapps.dir}">
      <condition><not><available file="${tomcat1.webapps.dir}"/></not></condition>
    </fail>

    <copy todir="${tomcat1.webapps.dir}/${servlet.context.prefix}">
      <fileset dir="${yanel.home.dir}/build/webapps/${servlet.context.prefix}"/>
    </copy>
  </target>

  <target name="deploy-to-tomcat-cluster-node2" if="property-tomcat-cluster-node2-is-set" description="Deploy webapp to Tomcat cluster node 2">
    <echo>Copy webapp (${tomcat2.webapps.dir}):</echo>

    <fail message="No such directory: ${tomcat2.webapps.dir}">
      <condition><not><available file="${tomcat2.webapps.dir}"/></not></condition>
    </fail>

    <copy todir="${tomcat2.webapps.dir}/${servlet.context.prefix}">
      <fileset dir="${yanel.home.dir}/build/webapps/${servlet.context.prefix}"/>
    </copy>
  </target>

  <target name="clean" description="Clean build" depends="init">
    <delete dir="${build.dir}"/>
    <delete dir="${yanel.home.dir}/src/resources/invoice/build"/>
    <delete dir="${yanel.home.dir}/src/resources/websearch/build"/>
    <delete dir="${yanel.home.dir}/src/resources/odt/build"/>
    <delete dir="${yanel.home.dir}/src/resources/xml/build"/>
    <delete dir="${yanel.home.dir}/src/resources/file/build"/>
    <delete dir="${yanel.home.dir}/src/resources/directory/build"/>
    <delete dir="${yanel.home.dir}/src/resources/tape/build"/>
    <delete dir="${yanel.home.dir}/src/resources/calendar/build"/>

    <condition property="property-tomcat-cluster-node1-is-set">
      <and>
        <isset property="tomcat1.home.dir"/>
        <available file="${tomcat1.webapps.dir}/${servlet.context.prefix}" type="dir"/>
      </and>
    </condition>
    <antcall target="ask-to-clean-tomcat-cluster-node1"/>

    <condition property="property-tomcat-cluster-node2-is-set">
      <and>
        <isset property="tomcat2.home.dir"/>
        <available file="${tomcat2.webapps.dir}/${servlet.context.prefix}" type="dir"/>
      </and>
    </condition>
    <antcall target="ask-to-clean-tomcat-cluster-node2"/>
  </target>

  <target name="ask-to-clean-tomcat-cluster-node1" if="property-tomcat-cluster-node1-is-set" description="Clean Tomcat cluster node 1">
    <input message="Do you really want to delete your deployed (maybe productive) Yanel version at '${tomcat1.webapps.dir}/${servlet.context.prefix}'? (yes/NO):" addproperty="answer"/>
    <condition property="yes-delete-tomcat-cluster-node1">
      <equals arg1="yes" arg2="${answer}"/>
    </condition>
    <antcall target="do-clean-tomcat-cluster-node1"/>
  </target>

  <target name="do-clean-tomcat-cluster-node1" if="yes-delete-tomcat-cluster-node1" description="Clean Tomcat cluster node 1">
    <echo>Clean Tomcat cluster node 1:</echo>

    <fail message="No such directory: ${tomcat1.webapps.dir}">
      <condition><not><available file="${tomcat1.webapps.dir}"/></not></condition>
    </fail>

    <delete dir="${tomcat1.webapps.dir}/${servlet.context.prefix}"/>
    <delete dir="${tomcat1.work.dir}/${servlet.context.prefix}"/>
  </target>

  <target name="ask-to-clean-tomcat-cluster-node2" if="property-tomcat-cluster-node2-is-set" description="Clean Tomcat cluster node 2">
    <input message="Do you really want to delete your deployed (maybe productive) Yanel version at '${tomcat2.webapps.dir}/${servlet.context.prefix}'? (yes/NO):" addproperty="answer"/>
    <condition property="yes-delete-tomcat-cluster-node2">
      <equals arg1="yes" arg2="${answer}"/>
    </condition>
    <antcall target="do-clean-tomcat-cluster-node2"/>
  </target>

  <target name="do-clean-tomcat-cluster-node2" if="yes-delete-tomcat-cluster-node2" description="Clean Tomcat cluster node 2">
    <echo>Clean Tomcat cluster node 2:</echo>

    <fail message="No such directory: ${tomcat2.webapps.dir}">
      <condition><not><available file="${tomcat2.webapps.dir}"/></not></condition>
    </fail>

    <delete dir="${tomcat2.webapps.dir}/${servlet.context.prefix}"/>
    <delete dir="${tomcat2.work.dir}/${servlet.context.prefix}"/>
  </target>

  <target name="javadoc" description="Generate Javadoc" depends="init">
    <javadoc
      packagenames="org.*"
      sourcepath="${yanel.home.dir}/src/java"
      destdir="${yanel.home.dir}/build/javadoc"
      classpathref="classpath.run"
    >
    </javadoc>
  </target>

  <target name="run-yanel-cmdl" description="Run command line tool" depends="init-runtime">
    <!--
    <exec executable="java">
      <arg line="-classpath ${run.cp} org.wyona.yanel.cmdl.YanelCommandLine"/>
    </exec>
    -->
    <java classname="org.wyona.yanel.cmdl.YanelCommandLine">
      <classpath refid="classpath.run"/>
    </java>
  </target>

</project>
