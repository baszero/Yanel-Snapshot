<?xml version="1.0"?>
<!-- Everything common to most resource types. -->
<project name="yanel-resource-type"
 xmlns:artifact="antlib:org.apache.maven.artifact.ant"
>
<!-- the default task seems not to be imported at least with Ant 1.6.5 or Ant 1.7.1
 default="compile"
-->
  <dirname property="resource.home.dir" file="${ant.file}"/>

  <taskdef resource="net/sf/antcontrib/antlib.xml"/>

  <!-- For example set within build.sh ... -->
  <property name="yanel.home" value="${yanel.source.home}"/>
  <property file="${yanel.home}/src/build/local.build.properties"/>
  <property file="${yanel.home}/src/build/build.properties"/>

  <import file="${resource.home.dir}/src/build/dependencies.xml"/>

  <!-- Initialize build -->
  <target name="init" depends="dependencies">
    <artifact:remoteRepository id="wyona.remote.repository" url="${maven.url}"/>

    <property file="${resource.home.dir}/src/build/local.build.properties"/>
    <property file="${resource.home.dir}/src/build/build.properties"/>

    <path id="classpath">
      <pathelement path="${maven2.cp}"/>
      <pathelement path="${maven2.resource.cp}"/>
    </path>
    <property name="resource.build.dir" value="${resource.home.dir}/build"/>
    <property name="resource.classes.dir" value="${resource.build.dir}/classes"/>
    <property name="resource.lib.dir" value="${resource.build.dir}/lib"/>
    <property name="resource.java.dir" value="${resource.home.dir}/src/java"/>
    <property name="resource.resource.xml" value="${resource.home.dir}/resource.xml"/>
    <xmlproperty prefix="resource.resource.xml" file="${resource.resource.xml}"/>    

  </target>

  <property name="eclipse.yanel.build.classes.dir.link" value="yanel-build-webapp-classes"/>
  <property name="eclipse.classes.dir.link" value="cnode1-webapp-WEB-INF-classes"/>

  <target name="eclipse:classpath" description="Update Eclipse's .classpath file" depends="init">
    <artifact:dependencies pathId="Yanel.test.jars.classpath" filesetId="Yanel.test.jars.fileset">
      <remoteRepository refid="wyona.remote.repository"/>
      <dependency groupId="wyona-org-yanel" artifactId="yanel-test" version="${yanel.source.version}"/>
    </artifact:dependencies>
    <echo level="verbose">Yanel test JARs classpath: ${toString:Yanel.test.jars.classpath}</echo>

    <path id="eclipse.classpath">
      <fileset refid="maven2.fileset"/>
      <fileset refid="maven2.resource.fileset"/>
      <fileset refid="Yanel.test.jars.fileset"/>
    </path>
    <condition property="eclipse.classes.dir" value="${eclipse.classes.dir.link}" else="">
      <isset property="do.autopatch.cnode1.webapp.WEB-INF.classes"/>
    </condition>
    <condition property="eclipse.source.dirs" value="src/java:${eclipse.yanel.build.classes.dir.link}" else="">
      <isset property="do.autopatch.cnode1.webapp.WEB-INF.classes"/>
    </condition>
    <ant dir="${yanel.home}/tools/eclipse.settings" target="update-classpath"
     inheritAll="false" inheritRefs="false">
      <reference torefid="classpath.ref" refid="eclipse.classpath"/>
      <property name="classpath.dir" value="${resource.home.dir}"/>
      <property name="classes.dir" value="${eclipse.classes.dir}"/>
      <property name="source.dirs" value="${eclipse.source.dirs}"/>
    </ant>
    <echo><!--XXX -->WARNING (if you used -Ddo.autopatch.cnode1.webapp.WEB-INF.classes=foo to make Eclipse automatically patch the webapp's classes in place during compilation): the logs will show up in ${yanel.home}/build/log4j-cmdl.log and not in ${yanel.home}/build/log4j-cnode1.log (due to to way the build is currently set up).</echo>
  </target>

  <target name="eclipse" description="Generate all files needed to use the resource type under Eclipse (WARNING: .project file will be overwritten!)" depends="eclipse:classpath">
    <copy file="${yanel.home}/src/build/resource-types/Eclipse-3.template.project" tofile="${resource.home.dir}/.project">
      <filterset>
        <filter token="RESOURCE_TYPE_NAME" value="${ant.project.name}"/>
        <filter token="YANEL_VERSION" value="${yanel.version}-r${yanel.revision}"/>
        <filter token="GENERATION_COMMAND" value="build -f ${ant.file} eclipse"/>
        <filter token="YANEL_BUILD_CLASSES_DIR_LINK" value="${eclipse.yanel.build.classes.dir.link}"/>
        <filter token="YANEL_BUILD_CLASSES_DIR" value="${yanel.build.webapp.classes.dir}"/>
        <filter token="CLASSES_DIR_LINK" value="${eclipse.classes.dir.link}"/>
        <filter token="CLASSES_DIR" value="${tomcat1.webapps.dir}/${servlet.context.prefix}/WEB-INF/classes"/><!--FIXME: this should not be Tomcat-specific... -->
      </filterset>
    </copy>
    <echo>Eclipse project created: in Eclipse you can now import (as an existing project into your workspace) this resource-type with root directory set to ${resource.home.dir} and build it there!</echo>
  </target>

  <target name="compile" description="Compile Java classes" depends="init">

    <mkdir dir="${resource.classes.dir}"/>
    <javac srcdir="${resource.java.dir}" destdir="${resource.classes.dir}"
      classpathref="classpath"
      debug="true"
    />
    <!-- Replace dot by forward slash -->
    <propertyregex property="new.resource.java.classname.fs.path"
             input="${resource.resource.xml.resource(class)}"
             regexp="[.]"
             replace="/"
             global="true"
             casesensitive="false" />
    <!-- Remove name of class -->
    <!--<echo>Class file (without java extension): ${new.resource.java.classname.fs.path}</echo>-->
    <propertyregex property="new.resource.java.class.fs.path"
             input="${new.resource.java.classname.fs.path}"
             regexp="\/[^/]*$"
             replace=""
             global="true"
             casesensitive="false" />
    <!--<echo>Package directory: ${new.resource.java.class.fs.path}</echo>-->
    <copy todir="${resource.classes.dir}/${new.resource.java.class.fs.path}">
      <fileset dir="${resource.home.dir}" includes="resource*.xml,htdocs/**,yanel-htdocs/**"/><!--NOTE: only the "user-mgmt" resource-type folder contains several "resource-*.xml" files, all other resource-types only have one "resource.xml" (as of revision 41802 at least) -->
    </copy>
    <mkdir dir="${resource.lib.dir}"/>
    <jar destfile="${resource.lib.dir}/yanel-resource-${resource.name}-${resource.version}.jar"
      basedir="${resource.classes.dir}"
    />
    <available property="resource.install.needed" file="src/build/pom.xml"/>
    <antcall target="install-jar"/>
  </target>

  <target name="clean" depends="init">
    <delete dir="${resource.build.dir}"/>
  </target>

  <target name="copy-dependencies" depends="init">
    <copy todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/lib">
      <fileset refid="maven2.resource.fileset"/>
      <mapper type="flatten"/>
    </copy>
  </target>

  <!-- Place jar file for this resource into local maven repository -->
  <target name="install-jar" if="resource.install.needed">
    <copy file="src/build/pom.xml" tofile="build/lib/pom.xml"/>

    <replace file="build/lib/pom.xml" value="${resource.version}">
      <replacetoken>@VERSION@</replacetoken>
    </replace>
    <replace file="build/lib/pom.xml" value="${resource.name}">
      <replacetoken>@NAME@</replacetoken>
    </replace>

    <artifact:pom id="maven.project.core" file="build/lib/pom.xml"/>
    <artifact:install file="build/lib/yanel-resource-${resource.name}-${resource.version}.jar">
      <pom refid="maven.project.core"/>
    </artifact:install>
  </target>
</project>
