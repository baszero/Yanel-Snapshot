<?xml version="1.0"?>
<!-- Everything common to most resource types. -->
<project name="yanel-resource"
>
<!-- the default task seems not to be imported at least with Ant 1.6.5
 default="compile"
 default="install-jar"
-->
  <dirname property="resource.home.dir" file="${ant.file}"/>

  <taskdef resource="net/sf/antcontrib/antlib.xml"/>

  <!-- For example set within build.sh ... -->
  <property name="yanel.home" value="${yanel.source.home}"/>
  <property file="${yanel.home}/src/build/local.build.properties"/>
  <property file="${yanel.home}/src/build/build.properties"/>

  <import file="${resource.home.dir}/src/build/dependencies.xml"/>

  <target name="init" description="Initialize build" depends="dependencies">
    <property file="${resource.home.dir}/src/build/local.build.properties"/>
    <property file="${resource.home.dir}/src/build/build.properties"/>

    <path id="classpath">
      <pathelement path="${maven2.cp}"/>
    </path>
    <property name="resource.build.dir" value="${resource.home.dir}/build"/>
    <property name="resource.classes.dir" value="${resource.build.dir}/classes"/>
    <property name="resource.lib.dir" value="${resource.build.dir}/lib"/>
    <property name="resource.java.dir" value="${resource.home.dir}/src/java"/>
    <property name="resource.resource.xml" value="${resource.home.dir}/resource.xml"/>
    <xmlproperty prefix="resource.resource.xml" file="${resource.resource.xml}"/>    

  </target>

  <target name="eclipse:classpath" description="Update Eclipse's .classpath file" depends="init">
    <ant dir="${yanel.home}/tools/eclipse.settings" target="update-classpath"
     inheritAll="false" inheritRefs="false">
      <reference torefid="classpath.ref" refid="classpath"/>
      <property name="classpath.dir" value="${resource.home.dir}"/>
    </ant>
  </target>

  <target name="compile" description="Compile Java classes" depends="init">

    <mkdir dir="${resource.classes.dir}"/>
    <javac srcdir="${resource.java.dir}" destdir="${resource.classes.dir}"
      classpathref="classpath"
      debug="true"
    />
    <propertyregex property="new.resource.java.classname.fs.path"
             input="${resource.resource.xml.resource(class)}"
             regexp="[.]"
             replace="/"
             global="true"
             casesensitive="false" />
    <propertyregex property="new.resource.java.class.fs.path"
             input="${new.resource.java.classname.fs.path}"
             regexp="\/[^/]*$"
             replace=""
             global="true"
             casesensitive="false" />
    <copy todir="${resource.classes.dir}/${new.resource.java.class.fs.path}">
      <fileset dir="${resource.home.dir}" includes="resource*.xml,htdocs/**,yanel-htdocs/**"/><!--NOTE: only the "user-mgmt" resource-type folder contains several "resource-*.xml" files, all other resource-types only have one "resource.xml" (as of revision 41802 at least) -->
    </copy>
    <mkdir dir="${resource.lib.dir}"/>
    <jar destfile="${resource.lib.dir}/yanel-resource-${resource.name}-${resource.version}.jar"
      basedir="${resource.classes.dir}"
    />
  </target>

  <target name="clean" depends="init">
    <delete dir="${resource.build.dir}"/>
  </target>

  <target name="copy-dependencies" depends="init">
    <copy todir="${build.dir}/webapps/${servlet.context.prefix}/WEB-INF/lib">
      <fileset refid="maven2.resource.fileset"/>
      <mapper type="flatten"/>
    </copy>
  </target>

  <target name="install-jar" description="Place jar file for this resource into local maven repository" depends="init, clean, compile" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
    <copy file="src/build/pom.xml" tofile="build/lib/pom.xml"/>

    <replace file="build/lib/pom.xml" value="${resource.version}">
      <replacetoken>@VERSION@</replacetoken>
    </replace>
    <replace file="build/lib/pom.xml" value="${resource.name}">
      <replacetoken>@NAME@</replacetoken>
    </replace>

    <artifact:pom id="maven.project.core" file="build/lib/pom.xml"/>
    <artifact:install file="build/lib/yanel-resource-${resource.name}-${resource.version}.jar">
      <pom refid="maven.project.core"/>
    </artifact:install>
  </target>
</project>
