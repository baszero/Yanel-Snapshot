<?xml version="1.0"?><html xmlns="http://www.w3.org/1999/xhtml"><head>  <title>Performance</title>  <link rel="neutron-introspection" type="application/neutron+xml" href="?yanel.resource.usecase=introspection"/></head><body>  <h1>Performance</h1>  <p>Performance can be improved by deploying more than one &quot;working&quot; machine (see <a href="scalability.html">Scalability</a>), but it nevertheless makes sense to make sure that the application itself performs well. Possible bottlenecks are described below.</p><p><h2>Content retrieval<br/></h2>The performance of the content retrieval depends mainly on the actual persistance manager. Depending on the filesystem this is not necessarily an issue (for example one can use memory based filesystems for high performance environments), whereas in the case of databases one normally uses session pooling (also see <a href="scalability.html">Scalability</a>) and sophisticated caching mechanism of the database solution itself.<br/><h2>Content generation</h2>The performance of the content generation depends very much on how custom resources are aggregating/generating a response. Yanel doesn't set any restrictions on how this is being done and it mainly depends on the technology a custom resource is using (for example XSLT, Jelly, POJO).<h2>Access controlling</h2>Each request (URL) is being checked for authorization, but Yanel also allows <a href="../security/overview.html">content based access control</a> which can lead to many more authorization checks depending on the setup. Fortunately Yanel allows to use custom implementations of the access control policy manager per realm and hence one has always the mean to improve performance re access control.</p></body>
</html>