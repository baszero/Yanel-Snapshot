<?xml version="1.0"?><html xmlns="http://www.w3.org/1999/xhtml"><head>  <title>Serialization</title>  <link rel="neutron-introspection" type="application/neutron+xml" href="?yanel.resource.usecase=introspection"/></head><body>
<h1>Custom serialization</h1>
<p>Ways to customize serialization in Yanel:<br /> <br /> This can be done at two levels:<br /> - in the RC files<br /> - in Java code<br /> <br /> First the following formats already exist in Yanel, so no need for  customization to use them: XHTML Strict, HTML Transitional, XML, text.<br /> <br /> <br /> <br /> To implement the following formats the following output properties must  be set:<br /> <br /> <br /> *HTML Strict*: set serializer key to HTML_TRANSITIONAL to get the base  HTML properties right, then force the public doctype to the standard  HTML Strict value: "-//W3C//DTD HTML 4.01//EN", the system doctype may  be left alone as AFAIK mainstream browsers do not care and anyway Yanel  still has a bug on that, see comment example below)<br /> <br /> Example:<br /> ---8&lt;---<br /> &lt;?xml version="1.0"?&gt;<br /> <br /> &lt;yanel:resource-config xmlns:yanel="<a href="http://www.wyona.org/yanel/rti/1.0" target="_blank">http://www.wyona.org/yanel/rti/1.0</a>"&gt;<br /> &#160;[...]<br /> &#160;&lt;yanel:custom-config&gt;<br /> &#160; &#160;&lt;views xmlns="<a href="http://www.wyona.org/yanel/rti/1.0" target="_blank">http://www.wyona.org/yanel/rti/1.0</a>"&gt;<br /> &#160; &#160; &#160;&lt;view id="[...]"&gt;<br /> &#160; &#160; &#160; &#160;[...]<br /> &#160; &#160; &#160; &#160;&lt;mime-type&gt;text/html&lt;/mime-</p>
<div id=":164" class="ii gt">type&gt;<br /> &#160; &#160; &#160; &#160;&lt;serializer key="HTML_TRANSITIONAL"&gt;<br /> &#160; &#160; &#160; &#160;&lt;!--XXX HACK: forcing the doctype manually since Yanel does  not know about HTML Strict ATM: --&gt;<br /> &#160; &#160; &#160; &#160; &#160;&lt;doctype-public&gt;-//W3C//DTD HTML  4.01//EN&lt;/doctype-public&gt;<br /> &#160; &#160; &#160; &#160; &#160;&lt;!-- does not seem to work (!?!), the system doctype is  stuck with the 'loose' value: --&gt;<br /> <br /> &lt;doctype-system&gt;<a href="http://www.w3.org/TR/html4/strict.dtd" target="_blank">http://www.w3.org/TR/html4/strict.dtd</a>&lt;/doctype-system&gt;<br /> &lt;!--<br /> &#160; &#160; &#160; &#160; &#160;&lt;indent&gt;no&lt;/indent&gt;<br /> --&gt;<br /> &#160; &#160; &#160; &#160;&lt;/serializer&gt;<br /> &#160; &#160; &#160;&lt;/view&gt;<br /> &#160; &#160; &#160;[...]<br /> &#160; &#160;&lt;/views&gt;<br /> &#160;&lt;/yanel:custom-config&gt;<br /> &lt;/yanel:resource-config&gt;<br /> ---8&lt;---<br /> <br /> *XHTML Transitional*: set serializer key to XHTML_STRICT to get the base  XML properties right, then force the public doctype to the standard  XHTML Transitional value: "-//W3C//DTD XHTML 1.0 Transitional//EN", the  system doctype may remain wrong (same as above).<br /> <br /> Sadly this alone does not quite work yet because of one Yanel bug and  one missing workaround, see <a href="http://lists.wyona.org/pipermail/yanel-development/2010-June/004840.html" target="_blank">http://lists.wyona.org/pipermail/yanel-development/2010-June/004840.html</a><br /> <br /> This can however been done in Java code by overriding  #getViewDescriptor(String viewId) in every resource-type that needs the  right format, using the following helper code example:<br /> ---8&lt;---<br /> &#160; &#160;/**<br /> &#160; &#160; * Reconfigure the view to use XHTML 1.0 strict.<br /> &#160; &#160; */<br /> &#160; &#160;private static final void reconfigureViewDescriptor(ConfigurableViewDescriptor  cvd) {<br /> &#160; &#160; &#160; &#160;cvd.setMimeType("text/html");<br /> &#160; &#160; &#160; &#160;cvd.setSerializerKey(SerializerFactory.XHTML_STRICT_KEY);<br /> &#160; &#160; &#160; &#160;Properties serializerProperties = new Properties();<br /> &#160; &#160; &#160; &#160;serializerProperties.setProperty(OutputKeys.INDENT, "no");<br /> <br /> serializerProperties.setProperty(OutputKeys.OMIT_XML_DECLARATION,  "yes");<br /> &#160; &#160; &#160; &#160;serializerProperties.setProperty(OutputKeys.ENCODING,  "UTF-8");<br /> &#160; &#160; &#160; &#160;serializerProperties.setProperty(OutputKeys.DOCTYPE_PUBLIC,  "-//W3C//DTD XHTML 1.0 Transitional//EN");<br /> &#160; &#160; &#160; &#160;serializerProperties.setProperty(OutputKeys.DOCTYPE_SYSTEM,  "<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" target="_blank">http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd</a>");<br /> &#160; &#160; &#160; &#160;serializerProperties.setProperty(OutputKeys.METHOD,  "html"); //XXX HACK: needed to force root element name in doctype  declaration, see <a href="http://lists.wyona.org/pipermail/yanel-development/2010-June/004840.html" target="_blank">http://lists.wyona.org/pipermail/yanel-development/2010-June/004840.html</a><br /> &#160; &#160; &#160; &#160;cvd.setSerializerProperties(serializerProperties);<br /> &#160; &#160;}<br /> ---8&lt;---<br /> <br /> <br /> Other interesting format may be: JSON, HTML 5, XHTML 5, etc.<br /></div>
<p>&#160;</p>
</body></html>