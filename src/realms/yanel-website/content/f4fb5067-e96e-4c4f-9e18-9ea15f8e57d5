<?xml version="1.0"?>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Workflow</title>
  <link rel="neutron-introspection" type="application/neutron+xml" href="?yanel.resource.usecase=introspection"/>
</head>
<body>
<h1>Workflow<br /></h1>
<h2>Implementing Workflow in Resources</h2>
<p>Workflows can be implemented for all resources that implement the <a href="../../../javadoc/org/wyona/yanel/core/api/attributes/WorkflowableV1.html">WorkflowableV1</a> interface, although in practice it is more common to have the implementation delegate to WorkflowHelper (see org.wyona.yanel.impl.resources.XMLResource for example).</p>
<p>WorkflowableV1 interfaces require that a resource has also the VersionableV2 interface implemented. (NOTE re Yarep: In order to<br />create revisions one must implement Node.checkout() and Node.checkin() when modifying the content of nodes!)</p>
<h2>Workflow Schemas</h2>
<p>Worflow schemas define what actions, or transitions, may be made from instances of a resource in a given state, and to what state those transitions move. For example, one can define that a resource in state "draft" can be changed to state "review", and that from "review" it can either enter state "draft" (i.e. it is rejected by the reviewer) or "approved" (i.e. it is accepted by the reviewer).</p>
<p>There are, essentially, two steps involved in this. First, a schema may be <a href="#create_schema">created</a>, and secondly a resource may be <a href="#associate_schema">associated</a> with that schema. Neither step is compulsory, because if no specific schema is associated with a resource then the schema located within the default data repository of the corresponding realm will be used. That is, if a resource is workflowable by virtue of it implementing a Workflowable interface then there will always be a workflow associated with resources of that type.</p>
<p><a name="create_schema">&#160;</a></p>
<h3>Creating a Workflow Schema</h3>
<p>As already mentioned, a workflow consists of a set of known states, and a set of transitions between those states.</p>
<p>A typical schema file looks something like this:<br /><br /> <tt>&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br /> &lt;workflow xmlns="http://www.wyona.org/yanel/workflow/1.0"&gt;<br /> &lt;states&gt;<br /> &lt;!-- some known set of states --&gt;<br /> &lt;/states&gt;<br /><br /> &lt;transitions&gt;<br /> &lt;!-- some known set of transitions --&gt;<br /> &lt;/transitions&gt;<br /> &lt;/workflow&gt;</tt><br /> <br />and is placed in some directory below the realm's data-repo/data directory.</p>
<h4>States</h4>
<p>Let us assume that we wish to set up a schema like that describe in the first paragraph of this section, with "draft", "review", and "approved" states, and some transitions between some of these states. We would declare our states like this:<br /><br /> <tt>&lt;states&gt;<br /> &lt;state id="draft" initial="true"/&gt;<br /> &lt;state id="review"/&gt;<br /> &lt;state id="approved"/&gt;<br /> &lt;/states&gt;</tt></p>
<p>Note the 'initial="true"' next to the "draft" state. This indicates that new instances of the resources that are associated with this schema will initially be in the "draft" state.</p>
<h4>Transitions</h4>
<p>A transition entry is required for each transition that should be possible from one state to another.  A transition consists of an id, for example "submit", a specification of the "from" and "to" states, possibly one or more extra conditions which must be satisfied in order for the transition to be succesful, one or more textual descriptions of the transition, and one or more actions which are executed during the transition. For example:<br /><br /> <tt>&lt;transition id="submit" from="draft" to="review"&gt;<br /> &lt;condition class="org.wyona.yanel.impl.workflow.RoleCondition"&gt;write&lt;/condition&gt;<br /> &lt;description xml:lang="en"&gt;Submit for Review&lt;/description&gt;<br /> &lt;action class="org.wyona.yanel.impl.workflow.EmailAction"&gt;yanel-development@wyona.com&lt;/action&gt;<br /> &lt;/transition&gt;</tt></p>
<h4>Complete example</h4>
<p>The following specifies the states and transitions described in the first paragraph of this section:<br /><br /><tt> &lt;?xml version="1.0" encoding="UTF-8"?&gt;<br /> &lt;workflow xmlns="http://www.wyona.org/yanel/workflow/1.0"&gt;<br /><br /> &lt;states&gt;<br /> &lt;state id="draft" initial="true"/&gt;<br /> &lt;state id="review"/&gt;<br /> &lt;state id="approved"/&gt;<br /> &lt;/states&gt;<br /><br /> &lt;transitions&gt;<br /> &lt;transition id="submit" from="draft" to="review"&gt;<br /> &lt;condition class="org.wyona.yanel.impl.workflow.RoleCondition"&gt;write&lt;/condition&gt;<br /> &lt;description xml:lang="en"&gt;Submit for Review&lt;/description&gt;<br /> &lt;/transition&gt;<br /><br /> &lt;transition id="reject" from="review" to="draft"&gt;<br /> &lt;condition class="org.wyona.yanel.impl.workflow.RoleCondition"&gt;workflow.approve&lt;/condition&gt;<br /> &lt;description xml:lang="en"&gt;Reject&lt;/description&gt;<br /> &lt;/transition&gt;<br /><br /> &lt;transition id="approve-only" from="review" to="approved"&gt;<br /> &lt;condition class="org.wyona.yanel.impl.workflow.RoleCondition"&gt;workflow.approve&lt;/condition&gt;<br /> &lt;description xml:lang="en"&gt;Approve&lt;/description&gt;<br /> &lt;/transition&gt;<br /> &lt;/transitions&gt;<br /><br /> &lt;/workflow&gt;</tt></p>
<h4>Note on conditions:</h4>
<p>Conditions are references to Java classes which implement the org.wyona.yanel.core.workflow.Condition.interface.</p>
<p>RoleConditions mean that for the user to perform the transition, he or she must be allowed by <a href="../security/access-policies.html">access policies</a> to perform that operation.</p>
<p><a name="associate_schema">&#160;</a></p>
<h3>Associate the Resource with the Schema</h3>
<p>A workflow schema is associated with a resource by adding such a reference to the resource configuration file.</p>
<p>For example, adding<br /><br /><tt>&lt;yanel:property name="workflow-schema" value="/app/workflow/workflow-with-review.xml"/&gt;</tt><br /><br />to the file RES-CONFIGS_REPO:/some-page.html.yanel-rc so that it looks something like this:<br /><br /><tt> &lt;?xml version="1.0"?&gt;<br /> &lt;yanel:resource-config xmlns:yanel="http://www.wyona.org/yanel/rti/1.0"&gt;<br /> &lt;yanel:rti name="some-page" namespace="http://www.example.com/yanel/resource/1.0"/&gt;<br /><strong>&lt;yanel:property name="workflow-schema" value="/app/workflow/workflow-with-review.xml"/&gt;</strong><br /> &lt;yanel:custom-config&gt;<br /> ...<br /> &lt;/yanel:custom-config&gt;<br /> &lt;/yanel:resource-config&gt;</tt><br /><br />would mean that the system will lookup the schema in DATA_REPO:/app/workflow/workflow-with-review.xml when it is needed.</p>
</body>
</html>