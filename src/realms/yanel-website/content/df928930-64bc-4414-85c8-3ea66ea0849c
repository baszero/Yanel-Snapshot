<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
<title>Rapid Development of Components</title>
</head>
<body>
<div class="instructions">
<h1>Rapid Development of Components</h1>
<p>When developing Yanel components, often there is no need to recompile everything once a total build has been done. Examples of components that can be built separately are <strong>webapp classes</strong>, <strong>resource classes</strong> and <strong>realms</strong>.</p>
<h2>Efficiently building implementation classes</h2>
<p>If you change only classes belonging to the Yanel/Yarep implementations, you can save time by executing the target "install-jars":</p>
<pre>{yanel.home}/build.sh install-jars</pre>
<p>This will compile the classes and make the jar file. After this, you only need to copy this jar to your Tomcat directory and restart Tomcat/Yanel, e.g.:</p>
<pre>&#126;/Wyona/svn-repos/yanel $ copy build/lib/yanel-impl-1.0-dev-rREVISION.jar local/apache-tomcat-5.5.20/webapps/yanel/WEB-INF/lib/<br /></pre>
<h2>Efficiently building webapp classes</h2>
<p>Webapp classes are all classes that are under <code>{yanel.home}/src/webapp/src/java/org/wyona/yanel/servlet</code>. In order to build and test these classes efficiently, one can run:</p>
<pre>{yanel.home}/build.sh compile-webapp copy-basic-webapp-libs copy-webapp-files-to-tomcat-cluster-node1</pre>
<p>instead of running the whole build process. This will build only the webapp and redeploy it, and should reduce the waiting time from a couple of minutes to a couple of seconds.</p>
<h2>Efficiently building resource classes</h2>
<p>Resource classes can be found in separate directories at several locations, e.g.:</p>
<ul>
<li><code>{yanel.home}/src/resources</code></li>
<li><code>{yanel.home}/src/contributions/resources</code></li>
<li><code>{yanel.home}/src/realms/welcome-admin/yanel/resources</code></li>
<li><code>{yanel.home}/src/realms/from-scratch-realm-template/res-types</code></li>
<li><code>{my.realm}/res-types</code></li>
<li>etc...</li>
</ul>
<p>These classes all have their own <code>build.xml</code> files, so to compile them efficiently, one can run the build as</p>
<pre>{yanel.home}/build.sh -f {path.to.resource.dir}/build.xml</pre>
<p>instead of running the whole build process. Again, this will reduce the building time significantly, as only the changed resource will be built.</p>
<h2>Efficiently building single realms</h2>
<p>In the same way as building resource classes, it is also possible to build single realms after editing classes belonging to that realm:</p>
<pre>{yanel.home}/build.sh -f {my.realm}/build.xml</pre>
<h2>Other time savers</h2>
<p>You can also save time by setting ant to be less verbose, and skipping the compilation of the GWT classes:</p>
<pre>env ANT_ARGS=-q ./build.sh -Dgwt.compile.skip=foo</pre>
<p>&#160;</p>
<p>In order to reload classes and libraries without stop/start <a href="http://tomcat.apache.org/tomcat-5.5-doc/config/context.html">Tomcat</a> one can set within <code>local/apache-tomcat-5.5.20/conf/context.xml</code>:</p>
<pre>&lt;Context reloadable="true"></pre>
<p>&#160;</p>
</div>
</body>
</html>
