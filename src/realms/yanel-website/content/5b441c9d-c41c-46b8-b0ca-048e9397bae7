<?xml version="1.0"?><html xmlns="http://www.w3.org/1999/xhtml"><head>  <title>Scalability</title>  <link rel="neutron-introspection" type="application/neutron+xml" href="?yanel.resource.usecase=introspection"/></head><body>  <h1>Scalability</h1>  <p><h2>Content wise</h2>Yanel does not set any restrictions on the number of content &quot;nodes&quot; one wants to handle, but this is rather an issue of the actual content repository implementation (persistance manager) one chooses. The important thing is that Yanel allows one to choose any kind of persistance manager either by accessing it directly from within a resource or by using one or the other content repository API (for example JCR or Yarep).</p><p>The implementation of the content navigation is also <a href="../realm/realm-configuration.html#repo-navigation">configurable</a> per realm and hence does not lead into any restrictions.</p><h2>Session wise</h2>The scalability of the number of concurrent sessions is of course related to <a href="performance.html">performance</a> in general, but since Yanel is clusterable it also depends on the right choice of application server. There are many well-known Java based application servers, for example Tomcat, Jetty, JBoss, WebSphere or WebLogic. Since Yanel itself nicely separates the application from the data handling/storage, one can easily deploy Yanel on multiple &quot;working&quot; machines (second layer) behind a load-balancer (first layer), whereas the data storage could be on separate shared machines (third layer), which are for example mounted by the &quot;working&quot; machines and replicated by the persistance manager itself, whereas the repository journal would be shared by the working machines.</body>
</html>